'use strict';

var iframeResize = require('iframe-resizer/js/iframeResizer');
var PropTypes = require('prop-types');
var React = require('react');
var warning = require('warning');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var iframeResize__default = /*#__PURE__*/_interopDefaultLegacy(iframeResize);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var warning__default = /*#__PURE__*/_interopDefaultLegacy(warning);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
  }
  return target;
}

var _excluded$1 = ["autoResize", "bodyBackground", "bodyMargin", "bodyPadding", "checkOrigin", "inPageLinks", "heightCalculationMethod", "interval", "log", "maxHeight", "maxWidth", "minHeight", "minWidth", "resizeFrom", "scrolling", "sizeHeight", "sizeWidth", "warningTimeout", "tolerance", "widthCalculationMethod", "onClosed", "onInit", "onMessage", "onResized"];
var filterIframeAttribs = (function (props) {
  props.autoResize;
    props.bodyBackground;
    props.bodyMargin;
    props.bodyPadding;
    props.checkOrigin;
    props.inPageLinks;
    props.heightCalculationMethod;
    props.interval;
    props.log;
    props.maxHeight;
    props.maxWidth;
    props.minHeight;
    props.minWidth;
    props.resizeFrom;
    props.scrolling;
    props.sizeHeight;
    props.sizeWidth;
    props.warningTimeout;
    props.tolerance;
    props.widthCalculationMethod;
    props.onClosed;
    props.onInit;
    props.onMessage;
    props.onResized;
    var iframeProps = _objectWithoutPropertiesLoose(props, _excluded$1);
  return iframeProps;
});

var _excluded = ["title", "forwardRef"];
var IframeResizer = function IframeResizer(props) {
  var _props$title = props.title,
    title = _props$title === void 0 ? 'iframe' : _props$title,
    forwardRef = props.forwardRef,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var iframeProps = filterIframeAttribs(rest);
  var iframeRef = React.useRef(null);
  var onClose = function onClose() {
    var _iframeRef$current;
    warning__default["default"](!(iframeRef != null && iframeRef.current), "[iframeSizerReact][" + (iframeRef == null || (_iframeRef$current = iframeRef.current) == null ? void 0 : _iframeRef$current.id) + "] Close event ignored, to remove the iframe update your React component");
    return !(iframeRef != null && iframeRef.current);
  };

  // This hook is only run once, as once iframeResizer is bound, it will
  // deal with changes to the element and does not need recalling
  React.useEffect(function () {
    var iframe = iframeRef.current;
    iframeResize__default["default"](_extends({}, rest, {
      onClose: onClose
    }), iframe);
    return function () {
      var _iframe$iFrameResizer;
      return iframe == null || (_iframe$iFrameResizer = iframe.iFrameResizer) == null ? void 0 : _iframe$iFrameResizer.removeListeners();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  React.useImperativeHandle(forwardRef, function () {
    return {
      getIframeElement: function getIframeElement() {
        return iframeRef.current;
      },
      resize: function resize() {
        return iframeRef.current.iFrameResizer.resize();
      },
      moveToAnchor: function moveToAnchor(anchor) {
        return iframeRef.current.iFrameResizer.moveToAnchor(anchor);
      },
      sendMessage: function sendMessage(message, targetOrigin) {
        iframeRef.current.iFrameResizer.sendMessage(message, targetOrigin);
      }
    };
  });
  return /*#__PURE__*/React__default["default"].createElement("iframe", _extends({
    title: title
  }, iframeProps, {
    ref: iframeRef
  }));
};
IframeResizer.propTypes = {
  title: PropTypes__default["default"].string
};

module.exports = IframeResizer;
