import chai from 'chai';
import sinon from 'sinon';
import { getGatekeeperNetworkData, GKN_SERVICE_ENDPOINTS } from '../src/gatekeeperNetworkService';
import sinonChai from 'sinon-chai';

chai.use(sinonChai);
const { expect } = chai;
const sandbox = sinon.createSandbox();
describe('getGatekeeperNetworkData', function () {
  let fetchStub: sinon.SinonStub<[input: RequestInfo | URL, init?: RequestInit | undefined], Promise<Response>>;

  afterEach(sandbox.restore);
  beforeEach(() => {
    // Setup fetch stub
    // For some unknown reason, the stub doesn't work on my machine unless I console.log(global.fetch) first.
    console.log(global.fetch);
    fetchStub = sandbox.stub(global, 'fetch');
  });

  it('should throw an error if the stage is invalid', async () => {
    const stage = 'invalidStage';
    const gknId = 'someId';
    return expect(getGatekeeperNetworkData(stage, gknId)).to.be.rejectedWith(
      `No Gatekeeper Network Service endpoint found for stage ${stage}`
    );
  });

  it('should throw an error if the returned id does not match the requested gknId', async () => {
    const stage = 'dev';
    const gknId = 'someId';
    fetchStub.resolves({
      json: () => Promise.resolve({ id: 'differentId' }),
    } as Response);
    return expect(getGatekeeperNetworkData(stage, gknId)).to.be.rejectedWith(
      `Could not fetch data from Gatekeeper Network Service for ${gknId}`
    );
  });

  it('should return valid GknData if the request succeeds', async () => {
    const stage = 'prod';
    const gknId = 'validId';
    const expectedResponse = {
      id: gknId,
      chains: {
        ethereum: {
          chainSpecificId: '123',
        },
      },
      client: {
        tokenActiveDisplay: 'default',
      },
    };
    fetchStub.resolves({
      json: () => Promise.resolve(expectedResponse),
    } as Response);

    const result = await getGatekeeperNetworkData(stage, gknId);
    expect(result).to.eql(expectedResponse);

    expect(fetchStub).to.be.calledWith(`${GKN_SERVICE_ENDPOINTS[stage]}/public/gatekeeperNetwork/${gknId}`); // Alternative way to check if the stub was called with the specified arguments
  });
});
