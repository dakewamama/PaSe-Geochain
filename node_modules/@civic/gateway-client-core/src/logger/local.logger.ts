import { LogLevel } from '../../src/types/log';
import { DEFAULT_LOG_LEVEL, LoggingProvider } from './provider.logger';

const consoleWithOptionalObject = (
  method: (message: string, object?: unknown) => void,
  message: string,
  object?: unknown
) => {
  if (object) {
    method(message, object);
  } else {
    method(message);
  }
};

class LogLocal extends LoggingProvider {
  constructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {
    super(console, logLevel);
  }

  setLogLevel(logLevel: LogLevel): void {
    this.logLevel = logLevel;
  }

  debug(message: string, object?: unknown): void {
    consoleWithOptionalObject(this.logger.debug, message, object);
  }

  info(message: string, object?: unknown): void {
    consoleWithOptionalObject(this.logger.info, message, object);
  }

  warn(message: string, object?: unknown): void {
    consoleWithOptionalObject(this.logger.warn, message, object);
  }

  error(message: string, exception?: unknown): void {
    consoleWithOptionalObject(this.logger.error, message, exception);
  }
}

export default LogLocal;
