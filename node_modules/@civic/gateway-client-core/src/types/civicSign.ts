// TODO: Duplicate types in CivicSign

import { ChainError } from '../utils/errors';
import { SignatureMethod } from './chain';
import { CivicPassMessageBase } from './civicPass';

// Move to a central repo or use TS paths
export enum CivicSignEventTypeResponse {
  RESPONSE_PUBLIC_KEY = 'RESPONSE_PUBLIC_KEY',
  RESPONSE_DID = 'RESPONSE_DID',
  RESPONSE_SIGNED_PROOF = 'RESPONSE_SIGNED_PROOF',
  RESPONSE_SIGNED_MESSAGE = 'RESPONSE_SIGNED_MESSAGE',
  RESPONSE_ERROR = 'RESPONSE_ERROR',
}

export enum CivicSignEventTypeRequest {
  REQUEST_PUBLIC_KEY = 'REQUEST_PUBLIC_KEY',
  REQUEST_DID = 'REQUEST_DID',
  REQUEST_SIGNED_PROOF = 'REQUEST_SIGNED_PROOF',
  REQUEST_SIGNED_MESSAGE = 'REQUEST_SIGNED_MESSAGE',
}

export interface CivicSignEventTypeRequestMessage extends CivicPassMessageBase {
  request: CivicSignEventTypeRequest;
  payload?: Uint8Array | string;
  requestId: string;
}

export interface RemoteSign {
  sendPublicKey: (requestId: string, publicKey: string) => void;
  sendDid: (requestId: string, did: string) => void;
  sendSignedProof: (requestId: string, proof: string, signatureMethod: SignatureMethod) => void;
  sendSignedMessage: (requestId: string, message: Uint8Array) => void;
  sendError: (requestId: string, request: CivicSignEventTypeRequest, error: Error | ChainError) => void;
}

export type CivicSignResponseEvent = {
  event: CivicSignEventTypeResponse;
  data: string;
  instanceId: string;
};
