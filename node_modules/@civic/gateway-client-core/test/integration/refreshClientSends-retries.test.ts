import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore refresh client sends with retries integration tests', () => {
  let testHelpers: IntegrationTestHelpers;

  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox);
    // stub successful fetch calls with existing GK record
    testHelpers.stubSuccessfulFetchCalls({ withExistingGatekeeperRecord: true });
    testHelpers.stubRefreshPatchCall();
    // stub find token with an expired token
    testHelpers.stubFindToken({
      expiryTime: 1682891700, // old timestamp
    });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  afterEach(() => {
    testHelpers.expectFlowIdToBeSet('GWRC_refresh_');
  });

  context('send chain TX failures with the last attempt succeeding', () => {
    step('1. expect the Gatekeeper client to successfully initialize', async () => {
      testHelpers.initializeGatewayCore({ options: { clientSendsMaxRetries: 2 } });
      // wait for GK and on-chain checks to complete
      await sleep(110);
    });

    step('2. Expect gateway status to change to REFRESH_TOKEN_REQUIRED', async () => {
      testHelpers.expectRefreshTokenRequired();
    });

    step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
      await testHelpers.expectSuccessfulCivicSignProofFlow();
    });

    step('4. Set up tests so that user will abort transaction', () => {
      testHelpers.prepareUserAbortedTransaction();
    });

    step('5. Simulate refresh action being triggered', async () => {
      await testHelpers.simulateSucessfulDataCollectionTriggeringGKRefreshRequest();
    });

    step('6. Wait for the GK refresh request to trigger a chain TX send that will fail', async () => {
      await sleep(220);
    });

    step('7. The status should change to ERROR when the transaction gets aborted', async () => {
      testHelpers.expectChainError();
    });

    step('8. Simulate client retrying once the chain error screen is shown', async () => {
      await testHelpers.simulateCivicPassChainFailureEvent();
    });

    step('9. Wait for chain transaction to attempt to send and fail', async () => {
      await sleep(120);
    });

    step('10. The status should change to ERROR', async () => {
      testHelpers.expectChainError();
    });

    step('11. Simulate a successfull client sending of transaction when presented to the user', async () => {
      await sleep(110);
      testHelpers.prepareSuccessfulHandleTransaction();
    });

    step('12. Simulate another client retry', async () => {
      await testHelpers.simulateCivicPassChainFailureEvent();
    });

    step('13. Wait for the transaction to be returned and sent by the client', async () => {
      await sleep(120);
      await testHelpers.expectClientSendTransactionToBeSent(3);
    });

    step(
      '14. OnChain listener fires with active token and gateway status and gateway token are updated to active',
      async () => {
        await testHelpers.simulateActiveOnChainToken();
        testHelpers.expectActiveToken();
      }
    );
  });
});
