import { Connection, PublicKey, Transaction, TransactionSignature } from '@solana/web3.js';
import { ChainClientInterface, ChainType, GatewayToken, ProveWalletOwnershipResponse, ChainEvent, DID } from '@civic/gateway-client-core';
export type SolanaChainImplementationInputs = {
    connection: Connection;
    cluster: string;
    publicKey: PublicKey;
    signTransaction: (transaction: Transaction) => Promise<Transaction>;
    signMessage?: (message: Uint8Array) => Promise<Uint8Array>;
    handleTransaction?: (transaction: Transaction) => Promise<TransactionSignature>;
    gatekeeperNetworkAddress: PublicKey;
    stage: string;
};
export declare class SolanaChainImplementation implements ChainClientInterface {
    private inputs;
    private listeners;
    private gatewayToken;
    pendingTransaction: string | undefined;
    chainDetails: {
        chainType: ChainType;
        chainNetwork: string;
    };
    constructor(inputs: SolanaChainImplementationInputs);
    ownerDids(): Promise<DID[]>;
    on(event: ChainEvent, listener: (token: GatewayToken) => void): this;
    findGatewayToken(): Promise<GatewayToken | undefined>;
    proveWalletOwnership(message?: string): Promise<ProveWalletOwnershipResponse>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    handleTransaction(partiallySignedTx: string, frontendPollingTimeoutSeconds?: number): Promise<string>;
    requiresSignature(transaction: Transaction): boolean;
    handleTxSendError(err: Error): void;
    handleTxConfirmError(txSig: string, confirmTxErr: Error, frontendPollingTimeoutMs: number): Promise<string>;
    submitTransaction(transaction: Transaction, frontendPollingTimeoutMs: number): Promise<string>;
    onDestroy(): Promise<void>;
}
