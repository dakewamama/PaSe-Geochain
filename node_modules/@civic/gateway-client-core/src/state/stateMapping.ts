import { CivicPassMessageAction } from '../types/civicPass';
import { ExtendedGatewayStatus, GatewayStatus, InternalGatewayStatus } from '../types/gateway';

export const gatewayStatusToCivicPassAction: Record<InternalGatewayStatus, CivicPassMessageAction> = {
  [GatewayStatus.IN_REVIEW]: CivicPassMessageAction.TOKEN_IN_REVIEW,
  [GatewayStatus.ERROR]: CivicPassMessageAction.ERROR,
  [GatewayStatus.ACTIVE]: CivicPassMessageAction.TOKEN_ACTIVE,
  [GatewayStatus.REVOKED]: CivicPassMessageAction.TOKEN_REVOKED,
  [GatewayStatus.FROZEN]: CivicPassMessageAction.TOKEN_FROZEN,
  [GatewayStatus.REJECTED]: CivicPassMessageAction.TOKEN_REJECTED,
  // The Gatekeeper now returns errorCodes for all different kinds of IP errors,
  // and the iframe's tokenRejected route has mappings for all of them.
  // No need to use specific iframe routes for VPN Detected / Country Restricted anymore.
  // However we still keep separate GatewayStatuses for them (HTTP status codes) to support legacy clients.
  [GatewayStatus.LOCATION_NOT_SUPPORTED]: CivicPassMessageAction.TOKEN_REJECTED,
  [GatewayStatus.VPN_NOT_SUPPORTED]: CivicPassMessageAction.TOKEN_REJECTED,
  [GatewayStatus.REFRESH_TOKEN_REQUIRED]: CivicPassMessageAction.REFRESH,
  [GatewayStatus.CHECKING]: CivicPassMessageAction.STATUS,
  [GatewayStatus.UNKNOWN]: CivicPassMessageAction.ISSUANCE,
  [GatewayStatus.NOT_REQUESTED]: CivicPassMessageAction.ISSUANCE,
  [GatewayStatus.COLLECTING_USER_INFORMATION]: CivicPassMessageAction.ISSUANCE,
  [GatewayStatus.VALIDATING_USER_INFORMATION]: CivicPassMessageAction.ISSUANCE,
  [GatewayStatus.USER_INFORMATION_VALIDATED]: CivicPassMessageAction.ISSUANCE,
  [GatewayStatus.USER_INFORMATION_REJECTED]: CivicPassMessageAction.ISSUANCE,
  [ExtendedGatewayStatus.USER_VALIDATION_FAILED]: CivicPassMessageAction.ISSUANCE,
  [ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION]: CivicPassMessageAction.ISSUANCE,
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND]: CivicPassMessageAction.TOKEN_IN_REVIEW,
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN]: CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,
  [ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,
  [ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: CivicPassMessageAction.CHAIN_ERROR,
  [ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR]: CivicPassMessageAction.CHAIN_ERROR,
  [ExtendedGatewayStatus.CHAIN_SIGN_MESSAGE_ERROR]: CivicPassMessageAction.CHAIN_ERROR,
  [ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW]: CivicPassMessageAction.TOKEN_IN_PARTNER_REVIEW,
  [ExtendedGatewayStatus.TOKEN_REFRESH_IN_REVIEW]: CivicPassMessageAction.TOKEN_REFRESH_IN_REVIEW,
  [ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.REFRESH_CLIENT_PAYER_REQUESTED]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN]: CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,
  [ExtendedGatewayStatus.REFRESH_USER_INFORMATION_VALIDATED]: CivicPassMessageAction.REFRESH,
  [ExtendedGatewayStatus.RESTART]: CivicPassMessageAction.ISSUANCE,
  [ExtendedGatewayStatus.REFRESH_IN_REVIEW]: CivicPassMessageAction.REFRESH,
  [ExtendedGatewayStatus.RESTART_REFRESH]: CivicPassMessageAction.REFRESH,
  [ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND]: CivicPassMessageAction.TOKEN_REFRESH_IN_REVIEW,
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_START_NEW_TX]: CivicPassMessageAction.START_PRE_APPROVED_TRANSACTION,
  [ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_START_NEW_TX]: CivicPassMessageAction.START_PRE_APPROVED_TRANSACTION,
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX]: CivicPassMessageAction.SIGN_TRANSACTION,
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX]: CivicPassMessageAction.TOKEN_IN_REVIEW,
  [ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX]:
    CivicPassMessageAction.TOKEN_REFRESH_IN_REVIEW,
};

/** Map InternalGatewayStatuses that also contain non public API ExtendedGatewayStatuses to GatewayStatuses */
export const internalToOutputGatewayStatus = (internalStatus: InternalGatewayStatus): GatewayStatus => {
  switch (internalStatus) {
    // Map extended statuses to GatewayStatus
    case ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR:
      return GatewayStatus.ERROR;
    case ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR:
      return GatewayStatus.ERROR;
    case ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.TOKEN_REFRESH_IN_REVIEW:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.RESTART:
      return GatewayStatus.NOT_REQUESTED;
    case ExtendedGatewayStatus.RESTART_REFRESH:
      return GatewayStatus.REFRESH_TOKEN_REQUIRED;
    case ExtendedGatewayStatus.USER_VALIDATION_FAILED:
      return GatewayStatus.USER_INFORMATION_REJECTED;
    case ExtendedGatewayStatus.CHAIN_SIGN_MESSAGE_ERROR:
      return GatewayStatus.ERROR;
    case ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION:
      return GatewayStatus.NOT_REQUESTED;
    case ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_USER_INFORMATION_VALIDATED:
      return GatewayStatus.USER_INFORMATION_VALIDATED;
    case ExtendedGatewayStatus.REFRESH_CLIENT_PAYER_REQUESTED:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_IN_REVIEW:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_START_NEW_TX:
      return GatewayStatus.USER_INFORMATION_VALIDATED;
    case ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_START_NEW_TX:
      return GatewayStatus.USER_INFORMATION_VALIDATED;
    case ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX:
      return GatewayStatus.IN_REVIEW;
    case ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX:
      return GatewayStatus.IN_REVIEW;
    default:
      // otherwise return GatewayStatus
      return internalStatus;
  }
};
