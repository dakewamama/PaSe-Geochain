import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore initialisation chain-error integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox);
    testHelpers.stubSuccessfulFetchCalls();
    // this overrides the call above
    testHelpers.stubFindTokenRejection();
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  step('1. expect the Gatekeeper client to initialize', () => {
    testHelpers.initializeGatewayCore();
  });

  step('2. wait for chain call to complete', async () => {
    await sleep(110);
  });

  step('3. Expect gateway status to change to ERROR', async () => {
    testHelpers.expectError();
  });

  step('4. Simulate RPC network coming back online', async () => {
    testHelpers.stubFindToken(null);
  });

  step('5. Simulate user clicking retry', async () => {
    await testHelpers.simulateUserErrorRetryFlow();
  });

  step('6. Expect gateway status to change to NOT_REQUESTED after check complete', async () => {
    await sleep(200);
    await testHelpers.expectNotRequested();
  });
});
