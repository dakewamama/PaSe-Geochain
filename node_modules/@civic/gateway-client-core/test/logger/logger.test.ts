import { expect } from 'chai';
import * as sinon from 'sinon';
import { prefixLogger } from '../../src/logger/index';
import { LogLevel } from '../../src/types/log';

const sandbox = sinon.createSandbox();

describe('Logger Tests', () => {
  let spyDebug: sinon.SinonSpy;
  let spyInfo: sinon.SinonSpy;
  let spyWarn: sinon.SinonSpy;
  let spyError: sinon.SinonSpy;

  afterEach(sandbox.restore);

  beforeEach(() => {
    spyDebug = sandbox.spy(console, 'debug');
    spyWarn = sandbox.spy(console, 'warn');
    spyInfo = sandbox.spy(console, 'info');
    spyError = sandbox.spy(console, 'error');
  });

  it('should have default value of info and only log info messages correctly', () => {
    const logger = prefixLogger('TestModule');
    logger.debug('Testing debug');
    logger.info('Testing info');
    expect(spyDebug.called).to.be.false;
    expect(spyInfo.called).to.be.true;
  });

  it('should not log for levels lower than the set log level', () => {
    const logger = prefixLogger('TestModule');
    logger.setLogLevel?.(LogLevel.INFO);
    logger.debug('This should not log');
    expect(spyDebug.called).to.be.false;
    logger.info('This should log');
    expect(spyInfo.called).to.be.true;
  });

  it('should log for the set log level and levels above it', () => {
    const logger = prefixLogger('TestModule');
    logger.setLogLevel?.(LogLevel.INFO);
    logger.info('This should not log');
    expect(spyDebug.calledOnce).to.be.false;
    logger.warn('This should log');
    expect(spyWarn.called).to.be.true;
    logger.error('This should log');
    expect(spyError.calledOnce).to.be.true;
  });
});
