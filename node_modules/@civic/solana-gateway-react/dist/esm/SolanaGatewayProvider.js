import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useMemo } from 'react';
import { GatewayProvider } from '@civic/gateway-client-react';
import { prefixLogger } from '@civic/gateway-client-core';
import { SolanaChainImplementation } from '@civic/solana-gateway-chain-client';
import { VERSION } from './version';
const logInfo = prefixLogger('SolanaGatewayProvider').info;
export const SolanaGatewayProvider = ({ children = null, wallet, connection, cluster = 'mainnet-beta', gatekeeperNetwork, wrapper, logo, stage = 'prod', redirectUrl, gatekeeperSendsTransaction, payer, handleTransaction, expiryMarginSeconds, options, partnerAppId, forceRequireRefresh, hideWalletPrompts, }) => {
    var _a;
    // default to true in case the passed wallet doesn't support the 'connected' property
    if (payer && gatekeeperSendsTransaction)
        throw Error('Cannot set payer when gatekeeperSendsTransaction is true');
    // these values are dependant on one-another so they need to all change together if an input changes
    const gatewayProviderProps = useMemo(() => {
        var _a;
        return ({
            walletAddress: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) === null || _a === void 0 ? void 0 : _a.toBase58(),
            chainImplementation: (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) && (wallet === null || wallet === void 0 ? void 0 : wallet.signTransaction) && stage && (gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58())
                ? new SolanaChainImplementation({
                    connection,
                    cluster,
                    publicKey: wallet.publicKey,
                    signTransaction: wallet.signTransaction,
                    signMessage: wallet.signMessage,
                    gatekeeperNetworkAddress: gatekeeperNetwork,
                    stage,
                    handleTransaction,
                })
                : undefined,
            stage,
            gatekeeperNetwork: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),
            options: Object.assign(Object.assign({}, options), { 
                // solana blockhashes are short so a default of only 1 client-side retry is reasonable
                clientSendsMaxRetries: (options === null || options === void 0 ? void 0 : options.clientSendsMaxRetries) || 1 }),
            gatekeeperSendsTransaction,
            expiryMarginSeconds,
            partnerAppId,
            disableInitialGatekeeperLookup: [
                'tigoYhp9SpCDoCQmXGj2im5xa3mnjR1zuXrpCJ5ZRmi',
                'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6',
            ].includes((gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()) || ''),
            payer: payer === null || payer === void 0 ? void 0 : payer.toBase58(),
            hideWalletPrompts,
        });
    }, [
        (_a = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) === null || _a === void 0 ? void 0 : _a.toBase58(),
        connection === null || connection === void 0 ? void 0 : connection.rpcEndpoint,
        cluster,
        stage,
        gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),
        handleTransaction,
        JSON.stringify(options),
        gatekeeperSendsTransaction,
        expiryMarginSeconds,
        partnerAppId,
        payer,
        hideWalletPrompts,
    ]);
    useEffect(() => {
        logInfo('Client Options', Object.assign(Object.assign({}, gatewayProviderProps), { forceRequireRefresh }));
    }, [gatewayProviderProps, forceRequireRefresh]);
    return (_jsx(GatewayProvider
    // memoised values that need to be synchronised
    , Object.assign({ 
        // memoised values that need to be synchronised
        walletAddress: gatewayProviderProps.walletAddress, chainImplementation: gatewayProviderProps.chainImplementation, stage: gatewayProviderProps.stage, gatekeeperNetwork: gatewayProviderProps.gatekeeperNetwork, options: gatewayProviderProps.options, gatekeeperSendsTransaction: !!gatewayProviderProps.gatekeeperSendsTransaction, expiryMarginSeconds: gatewayProviderProps.expiryMarginSeconds, partnerAppId: gatewayProviderProps.partnerAppId, disableInitialGatekeeperLookup: gatewayProviderProps.disableInitialGatekeeperLookup, payer: gatewayProviderProps.payer, 
        // non-memoised values that don't need to be synchronised
        redirectUrl: redirectUrl, logo: logo, 
        // Sent to the Gatekeeper in the x-civic-client version header.
        // If this is not passed in, the version of the generic gateway-client-react package will be used.
        reactComponentVersion: VERSION, wrapper: wrapper, forceRequireRefresh: forceRequireRefresh, expectTokenTimeoutSeconds: 30 }, { children: children })));
};
export { useSolanaGateway } from './useSolanaGateway';
export * from './types';
