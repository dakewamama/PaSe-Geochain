import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { GatewayStatus } from '../../src';
import { GatekeeperAPIStatus } from '../../src/types/gatekeeperApi';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

const rejectionStatusToGatewayStatusMap: { [key: number]: GatewayStatus } = {
  [GatekeeperAPIStatus.REJECTED]: GatewayStatus.REJECTED,
  [GatekeeperAPIStatus.VPN_NOT_SUPPORTED]: GatewayStatus.VPN_NOT_SUPPORTED,
  [GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED]: GatewayStatus.LOCATION_NOT_SUPPORTED,
  [GatekeeperAPIStatus.REQUESTED_RETRIES_EXHAUSTED]: GatewayStatus.ERROR,
};

describe('GatewayClientCore issuance rejection integration tests', () => {
  // for each rejection state
  Object.keys(rejectionStatusToGatewayStatusMap).forEach((key: string) => {
    const gkAPIState = Number(key) as GatekeeperAPIStatus;
    const expectedGatewayStatus = rejectionStatusToGatewayStatusMap[gkAPIState];

    let testHelpers: IntegrationTestHelpers;

    const errorCode = '0x001';

    before(() => {
      testHelpers = new IntegrationTestHelpers(sandbox);
      testHelpers.stubSuccessfulFetchCalls();
    });

    after(() => {
      testHelpers.cleanup();
      sandbox.restore();
    });

    context(`with GK record state ${gkAPIState} mapping to gateway status ${expectedGatewayStatus}`, () => {
      afterEach(() => {
        testHelpers.expectFlowIdToBeSet('GWRC_issuance_');
      });

      step('1. expect the Gatekeeper client to successfully initialize', async () => {
        testHelpers.initializeGatewayCore();
        // wait for GK and on-chain checks to complete
        await sleep(110);
      });

      step('2. Expect gateway status to change to NOT_REQUESTED', async () => {
        testHelpers.expectNotRequested();
      });

      step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
        await testHelpers.expectSuccessfulCivicSignProofFlow();
      });

      step('4. Simulate the gatekeeper rejecting the transaction', () => {
        testHelpers.simulateGatekeeperRequestTokenRejection(gkAPIState, errorCode);
      });

      step(
        '5. Emit a civic-pass event with the issuance action and expect a Gatekeeper-API issuance request',
        async () => {
          await testHelpers.simulateSucessfulDataCollectionTriggeringGKTokenRequest();
        }
      );

      step('6. Expect token in review', () => {
        testHelpers.expectClientSendsInReview();
      });

      step('7. Wait for the GK issuance request to complete', async () => {
        await sleep(120);
      });

      step(`8. Expect the status to change to ${expectedGatewayStatus}`, async () => {
        testHelpers.expectRejected(expectedGatewayStatus);
      });

      step('9. Expect userInteraction status to be FINISHED on civicPass rejection action', async () => {
        await testHelpers.simulateCivicPassRejectionAction(gkAPIState);
      });
    });
  });
});
