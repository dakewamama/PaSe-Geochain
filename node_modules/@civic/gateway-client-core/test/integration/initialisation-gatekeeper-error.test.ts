import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { GatekeeperAPIStatus } from '../../src/types/gatekeeperApi';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore initialisation gatekeeper-error integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox);
    testHelpers.stubSuccessfulFetchCalls();
    // this overrides the call above
    testHelpers.simulateGatekeeperRequestTokenRejection(GatekeeperAPIStatus.SERVER_FAILURE);
  });

  context('with the initial gatekeeper record lookup disabled', () => {
    after(() => {
      testHelpers.cleanup();
      sandbox.restore();
    });
    step('1. expect the Gatekeeper client to successfully initialize', () => {
      testHelpers.initializeGatewayCore({ disableInitialGatekeeperLookup: true });
    });

    step('2. wait for  on-chain checks to complete', async () => {
      await sleep(110);
    });

    step('3. Expect gateway status to change to NOT_REQUESTED', async () => {
      testHelpers.expectNotRequested();
    });
  });

  context('with the initial gatekeeper record lookup disabled flag not set', () => {
    after(() => {
      testHelpers.cleanup();
      sandbox.restore();
    });
    step('1. expect the Gatekeeper client to successfully initialize', () => {
      testHelpers.initializeGatewayCore();
    });

    step('2. wait longer for GK to retry', async () => {
      await sleep(8000);
    });

    step('3. Expect gateway status to change to ERROR', async () => {
      testHelpers.expectError();
    });

    step('4. Simulate network or server coming back online', async () => {
      testHelpers.stubSuccessfulFetchCalls();
    });

    step('5. Simulate user clicking retry', async () => {
      await testHelpers.simulateUserErrorRetryFlow();
    });

    step('6. Expect gateway status to change to NOT_REQUESTED after check complete', async () => {
      await sleep(200);
      await testHelpers.expectNotRequested();
    });
  });
});
