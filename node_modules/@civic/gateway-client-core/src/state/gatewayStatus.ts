import { prefixLogger } from '../logger';
import { ExtendedGatewayStatus, GatewayStatus, InternalGatewayStatus } from '../types/gateway';
import { GatewayCoreState, Transition } from '../types/gatewayCore';
import { GatewayTokenCheckType, handleGatewayTokenExistsStatus, ValidationGatewayStatusType } from './common';
import { handleChainError, handleGatekeeperError, handleUserValidationFailed } from './error';
import { checkForInProgress, computeInitialState } from './initialisation';
import {
  computeIssuanceAwaitingOnChainToken,
  computeIssuanceDataCollectionRestart,
  computeIssuanceInReview,
  computeIssuanceRequested,
  computeIssuanceStartPreApprovedTransaction,
  computeIssuanceStatus,
} from './issuance';
import {
  computeRefreshAwaitingOnChainToken,
  computeRefreshInReview,
  computeRefreshRequested,
  computeRefreshStartPreApprovedTransaction,
  computeRefreshStatus,
} from './refresh';

const logDebug = prefixLogger('gatewayStatus').debug;
const logError = prefixLogger('gatewayStatus').error;

const gatewayTokenStatuses = [
  GatewayStatus.ACTIVE,
  GatewayStatus.FROZEN,
  GatewayStatus.REVOKED,
  GatewayStatus.REFRESH_TOKEN_REQUIRED,
] as GatewayTokenCheckType[];

const validationProcessStatuses = [
  GatewayStatus.COLLECTING_USER_INFORMATION,
  GatewayStatus.VALIDATING_USER_INFORMATION,
  GatewayStatus.USER_INFORMATION_REJECTED,
  GatewayStatus.USER_INFORMATION_VALIDATED,
] as ValidationGatewayStatusType[];

type ErrorStatusType = GatewayStatus.ERROR | GatewayStatus.LOCATION_NOT_SUPPORTED | GatewayStatus.VPN_NOT_SUPPORTED;

const errorStatuses = [
  GatewayStatus.REJECTED,
  GatewayStatus.ERROR,
  GatewayStatus.LOCATION_NOT_SUPPORTED,
  GatewayStatus.VPN_NOT_SUPPORTED,
] as ErrorStatusType[];

function createTransition<T extends R[], R>(nextState: T, compute: (state: GatewayCoreState) => R): Transition<T, R> {
  return { nextState, compute };
}

export const transitions: Record<Partial<InternalGatewayStatus>, Transition<any, any>> = {
  [GatewayStatus.UNKNOWN]: createTransition([...gatewayTokenStatuses, GatewayStatus.CHECKING], checkForInProgress),
  [GatewayStatus.CHECKING]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ...validationProcessStatuses,
      GatewayStatus.NOT_REQUESTED,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_START_NEW_TX,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_START_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      // ExtendedGatewayStatus.TOKEN_REFRESH_IN_REVIEW, // we don't support this flow yet
    ],
    computeInitialState
  ),
  [GatewayStatus.NOT_REQUESTED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...validationProcessStatuses,
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      GatewayStatus.NOT_REQUESTED,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
    ],
    computeIssuanceStatus
  ),
  [GatewayStatus.COLLECTING_USER_INFORMATION]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...validationProcessStatuses,
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      GatewayStatus.NOT_REQUESTED,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      ExtendedGatewayStatus.USER_VALIDATION_FAILED,
    ],
    computeIssuanceStatus
  ),
  [GatewayStatus.USER_INFORMATION_VALIDATED]: createTransition(
    [...gatewayTokenStatuses, ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED, GatewayStatus.IN_REVIEW],
    computeIssuanceRequested
  ),
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
    ],
    computeIssuanceInReview
  ),
  [GatewayStatus.IN_REVIEW]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
    ],
    computeIssuanceInReview
  ),
  [GatewayStatus.REJECTED]: createTransition([], () => GatewayStatus.REJECTED), // final state
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeIssuanceInReview
  ),
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeIssuanceInReview
  ),
  [ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN]: createTransition(
    [...gatewayTokenStatuses, ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR],
    computeIssuanceAwaitingOnChainToken
  ),
  [ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...validationProcessStatuses,
      GatewayStatus.USER_INFORMATION_VALIDATED,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED,
      GatewayStatus.NOT_REQUESTED,
    ],
    computeIssuanceDataCollectionRestart
  ),
  [GatewayStatus.REVOKED]: createTransition([], handleGatewayTokenExistsStatus),
  [GatewayStatus.FROZEN]: createTransition([...gatewayTokenStatuses], handleGatewayTokenExistsStatus),
  [GatewayStatus.ACTIVE]: createTransition([...gatewayTokenStatuses], handleGatewayTokenExistsStatus),
  [GatewayStatus.ERROR]: createTransition(
    [...gatewayTokenStatuses, ExtendedGatewayStatus.RESTART, ExtendedGatewayStatus.RESTART_REFRESH],
    handleGatekeeperError
  ), // final state
  [GatewayStatus.LOCATION_NOT_SUPPORTED]: createTransition([], () => GatewayStatus.LOCATION_NOT_SUPPORTED), // final state
  [GatewayStatus.VPN_NOT_SUPPORTED]: createTransition([], () => GatewayStatus.VPN_NOT_SUPPORTED), // final state
  [ExtendedGatewayStatus.USER_VALIDATION_FAILED]: createTransition(
    [ExtendedGatewayStatus.USER_VALIDATION_FAILED, ExtendedGatewayStatus.RESTART],
    handleUserValidationFailed
  ),
  [GatewayStatus.REFRESH_TOKEN_REQUIRED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.REFRESH_USER_INFORMATION_VALIDATED,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_START_NEW_TX,
    ],
    computeRefreshStatus
  ),
  [ExtendedGatewayStatus.REFRESH_USER_INFORMATION_VALIDATED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.REFRESH_CLIENT_PAYER_REQUESTED,
      ExtendedGatewayStatus.REFRESH_IN_REVIEW,
    ],
    computeRefreshRequested
  ),
  [ExtendedGatewayStatus.REFRESH_IN_REVIEW]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.TOKEN_REFRESH_IN_REVIEW]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.REFRESH_CLIENT_PAYER_REQUESTED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN]: createTransition(
    [...gatewayTokenStatuses, ...errorStatuses, ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR],
    computeRefreshAwaitingOnChainToken
  ),
  [ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: createTransition(
    [
      ...gatewayTokenStatuses,
      GatewayStatus.USER_INFORMATION_VALIDATED,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.RESTART_REFRESH,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
    ],
    handleChainError
  ),
  [ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.RESTART_REFRESH,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
    ],
    handleChainError
  ),
  [ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW]: createTransition(
    [...gatewayTokenStatuses, ...errorStatuses, ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN],
    computeIssuanceInReview
  ),
  [ExtendedGatewayStatus.RESTART]: createTransition(
    [ExtendedGatewayStatus.RESTART],
    () => ExtendedGatewayStatus.RESTART
  ),
  [ExtendedGatewayStatus.RESTART_REFRESH]: createTransition(
    [ExtendedGatewayStatus.RESTART_REFRESH],
    () => ExtendedGatewayStatus.RESTART_REFRESH
  ),
  [ExtendedGatewayStatus.CHAIN_SIGN_MESSAGE_ERROR]: createTransition(
    [
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.RESTART_REFRESH,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
    ],
    handleChainError
  ),
  // the states below are not currently being used by the events emitter
  // but they are included here in case they are needed in the future
  [GatewayStatus.VALIDATING_USER_INFORMATION]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...validationProcessStatuses,
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      GatewayStatus.NOT_REQUESTED,
    ],
    computeIssuanceStatus
  ),
  [GatewayStatus.USER_INFORMATION_REJECTED]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...validationProcessStatuses,
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.RESTART,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      GatewayStatus.NOT_REQUESTED,
    ],
    computeIssuanceStatus
  ),
  [ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: createTransition(
    [],
    () => ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION
  ),
  [ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION]: createTransition(
    [],
    () => ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION
  ),
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_START_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
    ],
    computeIssuanceStartPreApprovedTransaction
  ),
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeIssuanceInReview
  ),
  [ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.ISSUANCE_RESTART_DATA_COLLECTION,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.ISSUANCE_AWAITING_ON_CHAIN_TOKEN, // civic-sends case
      ExtendedGatewayStatus.TOKEN_IN_PARTNER_REVIEW,
      ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,
    ],
    computeIssuanceInReview
  ),
  [ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_START_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX,
      ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX,
    ],
    computeRefreshStartPreApprovedTransaction
  ),
  [ExtendedGatewayStatus.REFRESH_CLIENT_SENDS_REQUEST_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
    ],
    computeRefreshInReview
  ),
  [ExtendedGatewayStatus.REFRESH_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX]: createTransition(
    [
      ...gatewayTokenStatuses,
      ...errorStatuses,
      ExtendedGatewayStatus.REFRESH_AWAITING_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_THIRD_PARTY_TRANSACTION_SEND,
      ExtendedGatewayStatus.REFRESH_AWAITING_ON_CHAIN_TOKEN,
    ],
    computeRefreshInReview
  ),
};

const isValidTransition = (current: InternalGatewayStatus, next: InternalGatewayStatus): boolean => {
  return transitions[current]?.nextState.includes(next);
};

const performTransition = (state: GatewayCoreState) => {
  const currentStatus = state.internal?.status as GatewayStatus;
  const computeFn = transitions[currentStatus]?.compute;
  if (!computeFn) {
    throw new Error(`No transition function defined for ${currentStatus} status`);
  }
  const computedStatus = computeFn(state);
  if (computedStatus === currentStatus) {
    return currentStatus;
  }
  if (!isValidTransition(currentStatus, computedStatus)) {
    logError('Invalid transition, throwing an error...', { currentStatus, computedStatus });
    throw new Error(
      `Invalid transition, returning currentStatus currentStatus: ${currentStatus} computedStatus: ${computedStatus}`
    );
  }
  logDebug('Transitioning to new status', { currentStatus, computedStatus });
  return computedStatus;
};

export const computeInternalStatus = (state: GatewayCoreState): InternalGatewayStatus => {
  return performTransition(state);
};
