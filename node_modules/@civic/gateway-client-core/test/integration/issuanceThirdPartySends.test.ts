import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore issuance Third party sends integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox, { clientSends: false });
    testHelpers.stubSuccessfulFetchCalls({ postResponsePayload: { transaction: undefined }, payer: null });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  afterEach(() => {
    testHelpers.expectFlowIdToBeSet('GWRC_issuance_');
  });

  step('1. expect the Gatekeeper client to successful initialize', async () => {
    testHelpers.initializeGatewayCore();
    // wait for GK and on-chain checks to complete
    await sleep(110);
  });

  step('2. Expect gateway status to change to NOT_REQUESTED', async () => {
    testHelpers.expectNotRequested();
  });

  step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
    await testHelpers.expectSuccessfulCivicSignProofFlow();
  });

  step('4. Simulate a successfull third-party sending of transaction when presented to the user', async () => {
    testHelpers.prepareSuccessfulThirdPartyHandleTransaction();
  });

  step('5. Emit a civic-pass event to initiate the GK-API issuance request', async () => {
    await testHelpers.simulateSucessfulDataCollectionTriggeringGKTokenRequest();
  });

  step('6. Expect token in review', () => {
    testHelpers.expectCivicSendsInReview();
  });

  step(
    '7. OnChain listener fires with active token and gateway status and gateway token are updated to active',
    async () => {
      await testHelpers.simulateActiveOnChainToken();
      testHelpers.expectActiveToken();
    }
  );
});
