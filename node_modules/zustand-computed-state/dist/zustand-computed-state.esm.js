function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function getAllGetters(obj) {
  var getters = {};
  // Iterate over all properties of the object itself (not its prototype chain)
  Object.getOwnPropertyNames(obj).forEach(function (prop) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    // Check if the property has a getter
    if (descriptor && typeof descriptor.get === 'function') {
      getters[prop] = descriptor.get;
    }
  });
  // Iterate over all properties of the object's prototype chain
  var proto = Object.getPrototypeOf(obj);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(function (prop) {
      var descriptor = Object.getOwnPropertyDescriptor(proto, prop);
      // Check if the property has a getter
      if (descriptor && typeof descriptor.get === 'function' && !getters.hasOwnProperty(prop)) {
        getters[prop] = descriptor.get;
      }
    });
    proto = Object.getPrototypeOf(proto);
  }
  return getters;
}

var prefix = '$$_computed_';
function injectComputedMiddleware(f) {
  return function (set, get, api) {
    function getComputedState(state) {
      var computedFunctions = Object.entries(state).filter(function (_ref) {
        var key = _ref[0];
        return key.startsWith(prefix);
      }).map(function (s) {
        return s[1];
      });
      var computedSt = computedFunctions.reduce(function (acc, cur) {
        return _extends({}, acc, cur(state));
      }, {});
      return computedSt;
    }
    var setWithComputed = function setWithComputed(update, replace) {
      set(function (state) {
        var updated = typeof update === 'object' ? update : update(state);
        var newState = _extends({}, state, updated);
        return _extends({}, newState, getComputedState(newState));
      }, replace);
    };
    api.setState = setWithComputed;
    var st = f(setWithComputed, get, api);
    return Object.assign({}, st, getComputedState(st));
  };
}
function withGetters(initialState) {
  var getters = getAllGetters(initialState);
  return function (newState) {
    var result = {};
    Object.keys(getters).forEach(function (key) {
      result[key] = getters[key].bind(newState)();
    });
    return result;
  };
}
function compute(
// @ts-ignore
getOrId, getOrCompute, computeOrUndefined) {
  var _ref3;
  if (typeof getOrId === 'string') {
    var _ref2;
    return _ref2 = {}, _ref2[prefix + "_" + getOrId] = computeOrUndefined, _ref2;
  }
  if (typeof getOrId === 'object') {
    var _extends2;
    return _extends({}, getOrId, (_extends2 = {}, _extends2[prefix] = withGetters(getOrId), _extends2));
  }
  return _ref3 = {}, _ref3[prefix] = getOrCompute, _ref3;
}
var computed = function computed(f) {
  return injectComputedMiddleware(f);
};

export { compute, computed };
//# sourceMappingURL=zustand-computed-state.esm.js.map
