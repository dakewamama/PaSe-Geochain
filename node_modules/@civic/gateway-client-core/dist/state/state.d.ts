import { Mutate, StoreApi } from 'zustand/vanilla';
import { DevtoolsOptions } from 'zustand/middleware';
import { GatewayStatus } from '../types/gateway';
import { GatewayCoreState } from '../types/gatewayCore';
import { Draft } from 'immer';
export type Store = Mutate<StoreApi<GatewayCoreState>, [
    ['zustand/subscribeWithSelector', never],
    ['zustand/immer', never]
]>;
export type WritableDraft<T> = {
    -readonly [K in keyof T]: Draft<T[K]>;
};
export declare const initialOutputState: {
    flowParameters: undefined;
    flowState: {
        status: undefined;
        userInteraction: {
            status: null;
            count: number;
        };
    };
    gatewayStatus: GatewayStatus;
    gatewayToken: undefined;
    gatewayTokenTransaction: undefined;
    pendingRequests: undefined;
    ui: undefined;
};
export declare const initialInputState: {
    civicSign: {
        status: null;
        received: null;
    };
    civicPass: {
        status: null;
        received: null;
    };
    gatewayToken: {
        status: null;
        received: null;
    };
    gatekeeperRecord: {
        status: null;
        received: null;
    };
    parameters: null;
    dynamicParameters: {
        forceRequireRefresh: boolean;
    };
    gatekeeperNetworkData: {
        status: null;
        received: null;
    };
};
export declare const createGatewayCoreStore: (options: DevtoolsOptions) => WritableDraft<Store>;
