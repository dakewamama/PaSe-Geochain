import { FlowStatus } from '../../src/types/flow';
import { computeUiState } from '../../src/state/ui';
import { GatewayCoreState } from '../../src/types/gatewayCore';
import { expect } from 'chai';
import { IFRAME_ENDPOINTS } from '../../src/config';
import { UserInteractionStatus } from '../../src/types/userInteraction';

describe('ui state tests', () => {
  context('computeUiState', () => {
    context('url', () => {
      context('with no output flowParameters', () => {
        it('should set the url to undefined', () => {
          const state = {
            inputs: {
              parameters: {
                stage: 'test',
              },
            },
            internal: {
              userInteraction: {
                status: 'started',
              },
            },
            output: {
              flowParameters: undefined,
            },
          } as unknown as GatewayCoreState;
          const uiState = computeUiState(state, undefined, undefined);
          expect(uiState.url).to.be.undefined;
        });
      });

      context('with output flowParameters', () => {
        Object.entries(IFRAME_ENDPOINTS).forEach(([stage, endpoint]) => {
          it(`should set the url to serialized flowParameters with the correct ${stage} endpoint ${endpoint}`, () => {
            const state = {
              inputs: {
                parameters: {
                  stage: stage,
                },
              },
              internal: {
                userInteraction: {
                  status: 'started',
                },
              },
              output: {
                flowParameters: {
                  test: 'test',
                  test2: true,
                  test3: undefined,
                },
              },
            } as unknown as GatewayCoreState;
            const uiState = computeUiState(state, undefined, state.output?.flowParameters);
            expect(uiState.url).to.equal(`${endpoint}/?test=test&test2=true`);
          });
        });
      });
    });

    context('isVisible', () => {
      context('with a flowStatus of FlowStatus.FINISHED', () => {
        it('should set isVisible to false', () => {
          const state = {
            inputs: {
              parameters: {
                stage: 'test',
              },
            },
            output: {
              flowParameters: {},
            },
          } as unknown as GatewayCoreState;
          const uiState = computeUiState(state, FlowStatus.FINISHED, undefined);
          expect(uiState.isVisible).to.be.false;
        });
      });

      context('with a flowStatus of FlowStatus.IN_PROGRESS', () => {
        it('should set isVisible to true', () => {
          const state = {
            inputs: {
              parameters: {
                stage: 'test',
              },
            },
            output: {
              flowParameters: {},
            },
          } as unknown as GatewayCoreState;
          const uiState = computeUiState(state, FlowStatus.IN_PROGRESS, undefined);
          expect(uiState.isVisible).to.be.true;
        });
      });

      context('with a flowStatus of FlowStatus.RESULT', () => {
        context('with autoShowModal set to true', () => {
          it('should set isVisible to true', () => {
            const state = {
              inputs: {
                parameters: {
                  options: {
                    autoShowModal: true,
                  },
                  stage: 'test',
                },
              },
              output: {
                flowParameters: {},
              },
            } as unknown as GatewayCoreState;
            const uiState = computeUiState(state, FlowStatus.RESULT, undefined);
            expect(uiState.isVisible).to.be.true;
          });
        });

        context('with autoShowModal set to false', () => {
          it('should set isVisible to false', () => {
            const state = {
              inputs: {
                parameters: {
                  options: {
                    autoShowModal: false,
                  },
                  stage: 'test',
                },
              },
              output: {
                flowParameters: {},
              },
            } as unknown as GatewayCoreState;
            const uiState = computeUiState(state, FlowStatus.RESULT, undefined);
            expect(uiState.isVisible).to.be.false;
          });
        });
      });

      context('with a user status of STARTED', () => {
        it('should set isVisible to true', () => {
          const state = {
            inputs: {
              parameters: {
                stage: 'test',
              },
            },
            internal: {
              userInteraction: {
                status: UserInteractionStatus.STARTED,
              },
            },
            output: {
              flowParameters: {},
            },
          } as unknown as GatewayCoreState;
          const uiState = computeUiState(state, undefined, undefined);
          expect(uiState.isVisible).to.be.true;
        });
      });

      context('with a user status of FINISHED', () => {
        it('should set isVisible to false', () => {
          const state = {
            inputs: {
              parameters: {
                stage: 'test',
              },
            },
            internal: {
              userInteraction: {
                status: UserInteractionStatus.FINISHED,
              },
            },
            output: {
              flowParameters: {},
            },
          } as unknown as GatewayCoreState;
          const uiState = computeUiState(state, undefined, undefined);
          expect(uiState.isVisible).to.be.false;
        });
      });
    });
  });
});
