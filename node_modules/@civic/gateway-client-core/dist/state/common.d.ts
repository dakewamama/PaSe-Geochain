import { ValidationStatus } from '../types/civicPass';
import { GatewayStatus } from '../types/gateway';
import { GatewayCoreState } from '../types/gatewayCore';
export type ValidationGatewayStatusType = GatewayStatus.COLLECTING_USER_INFORMATION | GatewayStatus.VALIDATING_USER_INFORMATION | GatewayStatus.USER_INFORMATION_REJECTED | GatewayStatus.NOT_REQUESTED | GatewayStatus.USER_INFORMATION_VALIDATED;
export type CheckValidationStatusType = ValidationStatus.COLLECTING | ValidationStatus.PROCESSING | ValidationStatus.IN_REVIEW | ValidationStatus.FAILED | ValidationStatus.COMPLETED;
export declare const validationProcessToGatewayStatus: Record<CheckValidationStatusType, ValidationGatewayStatusType>;
export declare const payerIsWalletOwner: (state: GatewayCoreState) => boolean;
export declare const tokenNoGatekeeperRecordError: (state: GatewayCoreState) => boolean;
export type GatewayTokenCheckType = GatewayStatus.ERROR | GatewayStatus.REFRESH_TOKEN_REQUIRED | GatewayStatus.ACTIVE | GatewayStatus.FROZEN | GatewayStatus.REVOKED;
export declare const statusFromGatewayTokenIfExists: (state: GatewayCoreState) => GatewayTokenCheckType | undefined;
export declare const handleGatewayTokenExistsStatus: (state: GatewayCoreState) => GatewayTokenCheckType;
export type StatusIfGatekeeperRecordRejectedType = GatewayStatus.REJECTED | GatewayStatus.LOCATION_NOT_SUPPORTED | GatewayStatus.VPN_NOT_SUPPORTED | GatewayStatus.REFRESH_TOKEN_REQUIRED | GatewayStatus.ERROR;
export declare const statusIfGatekeeperRecordRejected: (state: GatewayCoreState) => StatusIfGatekeeperRecordRejectedType | undefined;
