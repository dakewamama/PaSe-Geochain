import { StateCreator, StoreMutatorIdentifier } from 'zustand';
declare type ComputeFunctionType<StoreType, T> = (store: StoreType) => T;
export declare function compute<StoreType>(store: StoreType, get?: never, compute?: never): StoreType;
export declare function compute<StoreType, T extends Partial<StoreType>>(id: string, get: () => StoreType, compute: ComputeFunctionType<StoreType, T>): T;
export declare function compute<StoreType, T extends Partial<StoreType>>(get: () => StoreType, compute: ComputeFunctionType<StoreType, T>, id?: never): T;
declare type ComputedState = <T, Mps extends [StoreMutatorIdentifier, unknown][] = [], Mcs extends [StoreMutatorIdentifier, unknown][] = []>(f: StateCreator<T, Mps, Mcs>) => StateCreator<T, Mps, Mcs>;
export declare const computed: ComputedState;
export {};
