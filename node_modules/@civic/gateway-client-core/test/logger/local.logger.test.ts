import { expect } from 'chai';
import * as sinon from 'sinon';
import { LogLevel } from '../../src/types/log';
import LogLocal from '../../src/logger/local.logger';
import { LoggingProvider } from '../../src/logger/provider.logger';

const sandbox = sinon.createSandbox();

describe('LogLocal tests', () => {
  let logger: LoggingProvider;
  let spyDebug: sinon.SinonSpy;
  let spyWarn: sinon.SinonSpy;
  let spyInfo: sinon.SinonSpy;
  let spyError: sinon.SinonSpy;

  beforeEach(() => {
    spyDebug = sandbox.spy(console, 'debug');
    spyWarn = sandbox.spy(console, 'warn');
    spyInfo = sandbox.spy(console, 'info');
    spyError = sandbox.spy(console, 'error');
    logger = new LogLocal();
  });

  afterEach(sandbox.restore);

  context('should instantiate a new logLocal with the default log level', () => {
    beforeEach(() => {
      logger = new LogLocal();
    });

    it('log-level should be DEBUG by default', () => {
      logger.debug('Should log this');
      expect(spyDebug.called).to.be.true;
    });
  });

  context('should instantiate a new logLocal passing a log level', () => {
    beforeEach(() => {
      logger = new LogLocal(LogLevel.INFO);
    });

    it('should not log for levels higher than the set log level', () => {
      logger.error('This should not log');
      expect(spyError.called).to.be.true;
      logger.info('This should not log');
      expect(spyInfo.calledOnce).to.be.true;
    });
  });

  context('debug', () => {
    beforeEach(() => {
      logger.setLogLevel(LogLevel.DEBUG);
    });
    it('should log debug messages correctly', () => {
      logger.debug('Testing debug');
      expect(spyDebug.calledOnceWith('Testing debug')).to.be.true;
    });

    it('should log debug messages with object correctly', () => {
      logger.debug('Testing debug', { test: 'test' });
      expect(spyDebug.calledOnceWith('Testing debug')).to.be.true;
    });
  });

  context('info', () => {
    beforeEach(() => {
      logger.setLogLevel(LogLevel.INFO);
    });
    it('should log info messages correctly', () => {
      logger.info('Testing info');
      expect(spyInfo.calledOnceWith('Testing info')).to.be.true;
    });

    it('should log info messages correctly', () => {
      logger.info('Testing info', { test: 'test' });
      expect(spyInfo.calledOnceWith('Testing info')).to.be.true;
    });
  });

  context('warn', () => {
    beforeEach(() => {
      logger.setLogLevel(LogLevel.WARN);
    });
    it('should log warn messages correctly', () => {
      logger.warn('Testing warn');
      expect(spyWarn.calledOnceWith('Testing warn')).to.be.true;
    });

    it('should log warn messages with object correctly', () => {
      logger.warn('Testing warn', { test: 'test' });
      expect(spyWarn.calledOnceWith('Testing warn')).to.be.true;
    });
  });

  context('error', () => {
    beforeEach(() => {
      logger.setLogLevel(LogLevel.ERROR);
    });
    it('should log error messages correctly', () => {
      logger.error('Testing error');
      expect(spyError.calledOnceWith('Testing error')).to.be.true;
    });

    it('should log error messages correctly', () => {
      logger.error('Testing error', { test: 'test' });
      expect(spyError.calledOnceWith('Testing error')).to.be.true;
    });
  });
});
