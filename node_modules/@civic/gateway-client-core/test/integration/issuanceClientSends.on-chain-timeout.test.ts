import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('Issuance integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox);
    testHelpers.stubSuccessfulFetchCalls();
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  step('1. expect the Gatekeeper client to successfully initialize', () => {
    testHelpers.initializeGatewayCore({ expectTokenTimeoutSeconds: 2 });
  });

  step('wait for GK and on-chain checks to complete', async () => {
    await sleep(110);
  });

  step('2. Expect gateway status to change to NOT_REQUESTED', async () => {
    testHelpers.expectNotRequested();
  });

  step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
    await testHelpers.expectSuccessfulCivicSignProofFlow();
  });

  step('4. Prepare a successfull client sending of transaction when presented to the user', async () => {
    testHelpers.prepareSuccessfulHandleTransaction();
  });

  step('5. Simulate a civic-pass event triggering a GK-API token request', async () => {
    await testHelpers.simulateSucessfulDataCollectionTriggeringGKTokenRequest();
  });

  step('6. Expect token in review', () => {
    testHelpers.expectClientSendsInReview();
  });

  step('7. Wait longer than the expectTokenTimeoutSeconds', async () => {
    await sleep(6000);
  });

  step('7. The status should change to ERROR', async () => {
    testHelpers.expectChainError();
    testHelpers.expectFlowIdToBeSet();
  });
});
