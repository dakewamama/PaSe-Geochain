import logger from '../logger';
import { Stage } from '../types/parameters';
// Auto-generated by 'yarn generate-version' from package.json
// Done on prepublish and pretest
import { VERSION as CORE_VERSION } from '../../src/version';
import { FlowParameters } from '../../src/types/gatewayCore';
import { ErrorCode } from './errors';

export type CivicAnalyticsEvent = {
  did: string;
  validationId?: string;
  networkAddress: string;
  referrer?: string;
  redirectUrl?: string;
  wallet: string;
  domain: string;
  action: string;
  chainNetwork: string;
  chain: string;
  ownerSigns: string;
  flowId: string;
  flowType: string;
  errorCode?: string;
  partnerAppId?: string;
  signedTx?: string;
  civicClient?: string;
  instanceId?: string;
  provider?: string;
  hideWalletPrompts?: string;
};

export type SendBeaconFn = (url: string | URL, data?: BodyInit | null | undefined) => boolean;

export const CIVIC_ANALYTICS_ENDPOINTS: Record<Stage, string | null> = {
  local: null, // Disabled for local
  test: null, // Disabled for tests
  dev: 'https://dev.api.civic.com/analytics-dev/events',
  preprod: 'https://dev.api.civic.com/analytics-preprod/events',
  prod: 'https://api.civic.com/analytics/events',
};

/*
 * Sends an event into the Civic analytics pipeline, using the Beacon API (if available) with no-cors.
 * If the browser does not support Beacon, try fetch,
 * but fetch is not guaranteed to complete when the tab is being closed like Beacon is.
 *
 * If no clientPackageVersion is passed in, the core package version will be used.
 */
export const sendAnalyticsEvent = async (
  stage: Stage,
  event: CivicAnalyticsEvent,
  sendBeacon?: SendBeaconFn
): Promise<void> => {
  const url = CIVIC_ANALYTICS_ENDPOINTS[stage];
  if (!url) {
    logger.warn(`No analytics endpoint configured for stage ${stage}.`);
    return;
  }
  const packageVersion = event.civicClient || CORE_VERSION;
  const eventWithSource = {
    ...event,
    source: `passApi_${stage}`,
    civicClient: packageVersion,
  };
  if (sendBeacon) {
    logger.debug('Beacon API supported. Using it to send analytics event.', { event });
    // The call is queued by the browser and sent asap, even when the page is unloaded.
    // By default this uses text/plain, and uses no-cors.
    sendBeacon(url, JSON.stringify(eventWithSource));
    logger.debug('Analytics event sent.', { eventWithSource });
  } else {
    logger.debug('Beacon API not supported. Falling back to fetch.', { eventWithSource });
    await fetch(url, {
      method: 'POST',
      // So the analytics server doesn't have to allowlist all the possible dApp endpoints,
      // and preflight is not needed, minimizing the risk of losing a request on tab close.
      mode: 'no-cors',
      body: JSON.stringify(eventWithSource),
    });
  }
};

/**
 * Checks the chain implementation to see if a tx is pending.
 * If it is, emit a BROWSER_CLOSED_WHILE_TRANSACTION_PENDING event to analytics.
 *
 * This is called from the core 'destroy()' function, which is called from the
 * 'page closed' hooks in the various framework-specific components.
 */
export const sendOnCloseAnalyticsEvent = async (
  flowParameters: FlowParameters,
  pendingTxHash?: string,
  sendBeacon?: SendBeaconFn
) => {
  if (pendingTxHash) {
    logger.debug('Abort received while tx is still pending on the chainImplementation. Sending analytics event.');
    const event: CivicAnalyticsEvent = {
      did: flowParameters.did || '',
      networkAddress: flowParameters.networkAddress || '',
      chain: flowParameters.chain || '',
      chainNetwork: flowParameters.chainNetwork || '',
      ownerSigns: flowParameters.ownerSigns ? 'true' : 'false',
      wallet: flowParameters.wallet || '',
      domain: flowParameters.domain || '',
      referrer: flowParameters.referrer || '',
      action: 'CHAIN_ERROR',
      errorCode: ErrorCode.BROWSER_CLOSED_WHILE_TRANSACTION_PENDING,
      flowId: flowParameters.flowId || '',
      flowType: flowParameters.flowType || '',
      signedTx: pendingTxHash,
      civicClient: flowParameters.civicClient,
    };
    if (!flowParameters.stage) {
      logger.error('Unknown stage. Cannot send analytics event');
      return;
    }
    // This uses the Beacon API if the browser supports it, to guarantee delivery after the tab has closed.
    // Also, no-cors is used so events can be sent from any dApp origin.
    await sendAnalyticsEvent(flowParameters.stage as Stage, event, sendBeacon);
  } else {
    logger.debug('No pending tx in abort analytics handler. Not sending event.');
  }
};
