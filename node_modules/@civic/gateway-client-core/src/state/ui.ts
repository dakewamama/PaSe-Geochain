import { objectToURLParams } from '../utils/url';
import { getCivicPassEndpoint } from '../config';
import { FlowStatus } from '../types/flow';
import { FlowParameters, GatewayCoreState } from '../types/gatewayCore';
import { UIOutput } from '../types/ui';
import { UserInteractionStatus } from '../types/userInteraction';

const getUrl = (state: GatewayCoreState, flowParameters: FlowParameters | undefined): string | undefined => {
  if (!flowParameters) {
    return undefined;
  }
  if (!state.inputs?.parameters?.stage) {
    return undefined;
  }
  const url = new URL(getCivicPassEndpoint(state.inputs.parameters.stage));
  const urlParams = objectToURLParams(flowParameters || {});
  const getParams = new URLSearchParams(urlParams);
  return `${url.href}?${getParams.toString()}`;
};

export const computeUiState = (
  state: GatewayCoreState,
  flowStatus: FlowStatus | undefined,
  flowParameters: FlowParameters | undefined
): Partial<UIOutput> => {
  const options = state.inputs.parameters?.options;
  let calculatedIsVisible = !!state.output?.ui?.isVisible;
  if (
    flowStatus === FlowStatus.FINISHED ||
    state.internal?.userInteraction?.status === UserInteractionStatus.FINISHED
  ) {
    calculatedIsVisible = false;
  } else if (
    state.internal?.userInteraction?.status === UserInteractionStatus.STARTED ||
    flowStatus === FlowStatus.IN_PROGRESS
  ) {
    calculatedIsVisible = true;
  }

  // override the visibility if the flow is finished and autoShowModal is true
  if (flowStatus === FlowStatus.RESULT && options?.autoShowModal) {
    calculatedIsVisible = true;
  }
  const url = getUrl(state, flowParameters);
  const isLoading = state.output?.ui?.url !== url;
  return {
    ...state.output?.ui,
    isLoading,
    url,
    isVisible: !!calculatedIsVisible,
  };
};
