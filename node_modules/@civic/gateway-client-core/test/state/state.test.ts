import { expect } from 'chai';
import { Store, createGatewayCoreStore } from '../../src/state/state';
import { GatewayClientParameters } from '../../src/types/parameters';
import { GatewayStatus } from '../../src/types/gateway';

describe('state', () => {
  let gatewayCoreStore: Store;
  beforeEach(() => {
    gatewayCoreStore = createGatewayCoreStore({
      name: 'instance_test-instance-id',
      store: 'gateway-client-core',
    });
  });

  context('reset', () => {
    beforeEach(() => {
      gatewayCoreStore.setState((state) => {
        state.inputs.parameters = { payer: 'test-payer' } as GatewayClientParameters;
        state.internal.instanceId = 'test-instance-id';
        state.internal.status = GatewayStatus.NOT_REQUESTED;
      });
    });
    it('should leave instanceId intact', () => {
      gatewayCoreStore.getState().functions.reset();
      expect(gatewayCoreStore.getState().internal.instanceId).to.equal('test-instance-id');
    });
    it('should reset GatewayStatus to UNKNOWN', () => {
      gatewayCoreStore.getState().functions.reset();
      expect(gatewayCoreStore.getState().internal.status).to.equal(GatewayStatus.UNKNOWN);
    });
    it('should leave input parameters intact', () => {
      gatewayCoreStore.getState().functions.reset();
      expect(gatewayCoreStore.getState().inputs.parameters).to.deep.equal({ payer: 'test-payer' });
    });
  });
});
