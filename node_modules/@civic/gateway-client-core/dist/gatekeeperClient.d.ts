import { GatekeeperAPIStatus, GatekeeperClientConfig, GatekeeperRecordResponse, RequestTokenIssuanceResponse, RequestTokenRefreshResponse, TokenRequest } from './types/gatekeeperApi';
import { ChainType } from './types/chain';
export declare const GATEKEEPER_BASE_ENDPOINTS: Record<string, string>;
export declare const getGatekeeperEndpoint: (stage: string, chainType: ChainType) => string;
export declare const isGkApiStatusTokenCreated: (code: number) => boolean;
export declare const isGkApiStatusTokenPending: (code: number) => boolean;
export declare const isGkApiStatusRequestedRetriesExhausted: (code: number) => boolean;
export declare const isGkApiStatusFailure: (code: number) => boolean;
export declare const withoutUndefined: (obj: Record<string, unknown>) => Record<string, unknown>;
export declare class GatekeeperClient {
    initConfig: GatekeeperClientConfig;
    private abortController;
    private baseUrl;
    private queryParams;
    private headers;
    private defaultRetryParams;
    private fetchImplementation;
    private fetchWithRetry;
    constructor(initConfig: GatekeeperClientConfig, flowId?: string);
    setFlowId(flowId: string): void;
    private instanceName;
    abort(): void;
    private addQueryParams;
    private continueIfNotAborted;
    private urlForWallet;
    getGatekeeperRecordWithPayload(walletAddress?: string): Promise<GatekeeperRecordResponse | null>;
    getGatekeeperStatus(walletAddress?: string): Promise<GatekeeperAPIStatus>;
    requestGatewayTokenFromGatekeeper({ payload, proof, payer, }: TokenRequest): Promise<RequestTokenIssuanceResponse | null>;
    refreshToken({ payload, proof, payer }: TokenRequest): Promise<RequestTokenRefreshResponse | null>;
    fetchFreshTransaction({ payer }: TokenRequest): Promise<RequestTokenRefreshResponse | null>;
    updateTransactionStatus(txId: string, status?: string): Promise<void | null>;
}
