import { GatekeeperClient } from './gatekeeperClient';
import { Issuance } from './issuance';
import { Store } from './state/state';
import { ChainClientInterface } from './types/chain';
import { InputStatus } from './types/fetch';
import { TokenRequest } from './types/gatekeeperApi';
import { GatewayCoreState } from './types/gatewayCore';
import { DEFAULT_EXPECT_TOKEN_TIMEOUT_SECONDS } from './utils/defaults';
import { isTokenRefreshRequired } from './utils/expiry';

export class Refresh extends Issuance {
  constructor(
    readonly gatewayCoreStore: Store,
    readonly chainImplementation: ChainClientInterface,
    readonly gatekeeperClient: GatekeeperClient,
    readonly abortController: AbortController,
    readonly expectTokenTimeoutSeconds: number = DEFAULT_EXPECT_TOKEN_TIMEOUT_SECONDS
  ) {
    super(gatewayCoreStore, chainImplementation, gatekeeperClient, abortController, expectTokenTimeoutSeconds);
  }

  clearStateBeforeGatekeeperRequest() {
    this.gatewayCoreStore.setState((state) => {
      state.inputs.gatekeeperRecord.received = null;
      state.internal.chainTransaction = undefined;
      state.inputs.gatekeeperRecord.status = InputStatus.IN_PROGRESS;
    });
  }

  async gatekeeperRequest(payer: string | undefined, fullState: GatewayCoreState) {
    if (!fullState.inputs.civicPass.received?.payload) {
      this.log.error('Missing civicPass payload', fullState);
      throw new Error('Missing civicPass payload');
    }
    this.currentPayload = fullState.inputs.civicPass.received?.payload;
    return this.gatekeeperClient.refreshToken({
      payload: fullState.inputs.civicPass.received?.payload,
      payer,
    } as TokenRequest);
  }

  statusHasValidToken(): boolean {
    const updatedState = this.gatewayCoreStore.getState();
    const gatewayToken = updatedState.inputs.gatewayToken.received;
    if (!gatewayToken?.expiryTime) {
      return false;
    }
    return !!(
      gatewayToken &&
      !isTokenRefreshRequired({
        gatewayToken,
        tokenExpirationMarginSeconds: 0,
      })
    );
  }
}
