import { ChainClientInterface, DID, ProveWalletOwnershipResponse, SignatureMethod } from './types/chain';
import { CivicSignEventTypeRequest, CivicSignEventTypeRequestMessage, RemoteSign } from './types/civicSign';
import { ErrorWithCode } from './types/errors';
import { PostMessageInterface } from './types/eventInterface';
import { WalletAdapter } from './types/parameters';
import { ChainError } from './utils/errors';
export interface EventEmitter {
    postMessage: (message: unknown, targetOrigin: string) => void;
}
export declare const eventEmitter: (postMessageTarget: PostMessageInterface) => EventEmitter;
export type RemoteError = {
    request: CivicSignEventTypeRequest;
    error: ErrorWithCode;
};
export declare class RemoteSignWindowEventEmitter implements RemoteSign {
    readonly instanceId: string;
    private postMessageTarget;
    constructor(postMessageTarget: EventEmitter, instanceId: string);
    sendPublicKey(requestId: string, publicKey: string): void;
    sendDid(requestId: string, did: string): void;
    sendSignedProof(requestId: string, proof: string, signatureMethod: SignatureMethod): void;
    sendSignedMessage(requestId: string, message: Uint8Array): void;
    sendError(requestId: string, request: CivicSignEventTypeRequest, error: Error | ChainError): void;
    private emit;
}
export declare const handleRemoteSignEvent: (message: CivicSignEventTypeRequestMessage, remoteSignerInst: RemoteSignWindowEventEmitter, inputs: {
    wallet: WalletAdapter;
    chainImplementation: ChainClientInterface;
    ownerDids?: DID[];
}) => Promise<string | ProveWalletOwnershipResponse | Uint8Array | undefined | RemoteError>;
