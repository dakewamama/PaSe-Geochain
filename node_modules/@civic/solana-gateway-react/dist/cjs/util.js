"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTransactionErrorCode = exports.createSolanaTransactionFromBase64 = void 0;
const web3_js_1 = require("@solana/web3.js");
const gateway_client_core_1 = require("@civic/gateway-client-core");
const createSolanaTransactionFromBase64 = (partiallySignedTx) => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));
exports.createSolanaTransactionFromBase64 = createSolanaTransactionFromBase64;
const insufficientFundsMessages = ['insufficient funds', 'custom program error: 0x1'];
const isClientWalletFundsError = (error) => {
    if (insufficientFundsMessages.map((msg) => { var _a; return (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(msg); }).includes(true)) {
        return true;
    }
    return false;
};
// error: WalletSignMessageError: User rejected the request
const isUserRejectedError = (error) => {
    var _a, _b, _c;
    return !!(((_a = error === null || error === void 0 ? void 0 : error.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes('walletsignmessageerror')) ||
        ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes('walletsignmessageerror')) ||
        ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes('user rejected')));
};
const parseTransactionErrorCode = (error) => {
    if (isClientWalletFundsError(error)) {
        gateway_client_core_1.logger.warn('parseTransactionErrorCode - INSUFFICIENT_FUNDS error detected', error);
        return gateway_client_core_1.ErrorCode.INSUFFICIENT_FUNDS;
    }
    if (isUserRejectedError(error)) {
        gateway_client_core_1.logger.warn('parseTransactionErrorCode - SIGN_TRANSACTION_ERROR error detected', error);
        return gateway_client_core_1.ErrorCode.SIGN_TRANSACTION_ERROR;
    }
    return undefined;
};
exports.parseTransactionErrorCode = parseTransactionErrorCode;
