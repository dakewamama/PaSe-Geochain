import sinon from 'sinon';
import { GatewayCoreState, GatewayStatus } from '../../src';
import { checkForInProgress } from '../../src/state/initialisation';
import chai from 'chai';

const { expect } = chai;
const sandbox = sinon.createSandbox();

describe('initialisation state', () => {
  afterEach(sandbox.restore);
  context('checkForInProgress', () => {
    context('with a gateway token', () => {
      it('returns the gateway token status', () => {
        // Arrange
        const state = {
          inputs: {
            civicPass: { status: null, received: null },
            gatekeeperRecord: { status: null, received: null },
            gatewayToken: { status: null, received: { state: 'ACTIVE' } },
          },
          internal: { status: GatewayStatus.UNKNOWN, userInteraction: { status: null, count: 0 } },
          output: {
            flowParameters: undefined,
            flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
            gatewayStatus: GatewayStatus.UNKNOWN,
            gatewayToken: undefined,
            gatewayTokenTransaction: undefined,
            pendingRequests: undefined,
          },
        } as unknown as GatewayCoreState;
        const result = checkForInProgress(state);
        expect(result).to.equal(GatewayStatus.ACTIVE);
      });
    });

    context('with no gateway token', () => {
      context('with a civic pass status', () => {
        it('should return the previous status', () => {
          // Arrange
          const state = {
            inputs: {
              civicPass: { status: 'IN_PROGRESS', received: null },
              gatekeeperRecord: { status: null, received: null },
              gatewayToken: { status: null, received: null },
            },
            internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
            output: {
              flowParameters: undefined,
              flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
              gatewayStatus: GatewayStatus.UNKNOWN,
              gatewayToken: undefined,
              gatewayTokenTransaction: undefined,
              pendingRequests: undefined,
            },
          } as unknown as GatewayCoreState;
          const result = checkForInProgress(state);
          expect(result).to.equal(GatewayStatus.NOT_REQUESTED);
        });
      });

      context('with no civic pass status', () => {
        context('with a gatekeeper record status of IN_PROGRESS', () => {
          it('should return CHECKING', () => {
            // Arrange
            const state = {
              inputs: {
                civicPass: { status: null, received: null },
                gatekeeperRecord: { status: 'IN_PROGRESS', received: null },
                gatewayToken: { status: null, received: null },
              },
              internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
              output: {
                flowParameters: undefined,
                flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
                gatewayStatus: GatewayStatus.UNKNOWN,
                gatewayToken: undefined,
                gatewayTokenTransaction: undefined,
                pendingRequests: undefined,
              },
            } as unknown as GatewayCoreState;
            const result = checkForInProgress(state);
            expect(result).to.equal(GatewayStatus.CHECKING);
          });
        });

        context('with a gateway token status of IN_PROGRESS', () => {
          it('should return CHECKING', () => {
            // Arrange
            const state = {
              inputs: {
                civicPass: { status: null, received: null },
                gatekeeperRecord: { status: null, received: null },
                gatewayToken: { status: 'IN_PROGRESS', received: null },
              },
              internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
              output: {
                flowParameters: undefined,
                flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
                gatewayStatus: GatewayStatus.UNKNOWN,
                gatewayToken: undefined,
                gatewayTokenTransaction: undefined,
                pendingRequests: undefined,
              },
            } as unknown as GatewayCoreState;
            const result = checkForInProgress(state);
            expect(result).to.equal(GatewayStatus.CHECKING);
          });
        });
      });
    });
  });

  context('computeInitialState', () => {
    context('with a rejected gatekeeper record', () => {
      it('should return ERROR', () => {
        // Arrange
        const state = {
          inputs: {
            civicPass: { status: null, received: null },
            gatekeeperRecord: { status: 'ERROR', received: null },
            gatewayToken: { status: null, received: null },
          },
          internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
          output: {
            flowParameters: undefined,
            flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
            gatewayStatus: GatewayStatus.UNKNOWN,
            gatewayToken: undefined,
            gatewayTokenTransaction: undefined,
            pendingRequests: undefined,
          },
        } as unknown as GatewayCoreState;
        const result = checkForInProgress(state);
        expect(result).to.equal(GatewayStatus.ERROR);
      });
    });

    context('with no rejected gatekeeper record', () => {
      context('with a civic pass status', () => {
        it('should return the previous status', () => {
          // Arrange
          const state = {
            inputs: {
              civicPass: { status: 'IN_PROGRESS', received: null },
              gatekeeperRecord: { status: null, received: null },
              gatewayToken: { status: null, received: null },
            },
            internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
            output: {
              flowParameters: undefined,
              flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
              gatewayStatus: GatewayStatus.UNKNOWN,
              gatewayToken: undefined,
              gatewayTokenTransaction: undefined,
              pendingRequests: undefined,
            },
          } as unknown as GatewayCoreState;
          const result = checkForInProgress(state);
          expect(result).to.equal(GatewayStatus.NOT_REQUESTED);
        });
      });

      context('with no civic pass status', () => {
        context('with a gatekeeper record status of IN_PROGRESS', () => {
          it('should return CHECKING', () => {
            // Arrange
            const state = {
              inputs: {
                civicPass: { status: null, received: null },
                gatekeeperRecord: { status: 'IN_PROGRESS', received: null },
                gatewayToken: { status: null, received: null },
              },
              internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
              output: {
                flowParameters: undefined,
                flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
                gatewayStatus: GatewayStatus.UNKNOWN,
                gatewayToken: undefined,
                gatewayTokenTransaction: undefined,
                pendingRequests: undefined,
              },
            } as unknown as GatewayCoreState;
            const result = checkForInProgress(state);
            expect(result).to.equal(GatewayStatus.CHECKING);
          });
        });

        context('with a gateway token status of IN_PROGRESS', () => {
          it('should return CHECKING', () => {
            // Arrange
            const state = {
              inputs: {
                civicPass: { status: null, received: null },
                gatekeeperRecord: { status: null, received: null },
                gatewayToken: { status: 'IN_PROGRESS', received: null },
              },
              internal: { status: GatewayStatus.NOT_REQUESTED, userInteraction: { status: null, count: 0 } },
              output: {
                flowParameters: undefined,
                flowState: { status: undefined, userInteraction: { status: null, count: 0 } },
                gatewayStatus: GatewayStatus.UNKNOWN,
                gatewayToken: undefined,
                gatewayTokenTransaction: undefined,
                pendingRequests: undefined,
              },
            } as unknown as GatewayCoreState;
            const result = checkForInProgress(state);
            expect(result).to.equal(GatewayStatus.CHECKING);
          });
        });
      });
    });
  });
});
