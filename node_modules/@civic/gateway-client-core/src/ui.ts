import { Store } from './state/state';
import { GatewayStatus } from './types/gateway';
import { UserInteractionStatus } from './types/userInteraction';
import { prefixLogger } from './logger';
import { LoggingInterface } from './logger/provider.logger';

const defaultValues = { isVisible: false, isLoading: false, url: undefined, isLoaded: false };
export class UIManager {
  private log: LoggingInterface;

  constructor(readonly gatewayCoreStore: Store) {
    this.log = prefixLogger(`UIManager`);
  }

  onShow() {
    this.log.debug('onShow');
    this.gatewayCoreStore.setState((state) => {
      state.output = state.output || { gatewayStatus: GatewayStatus.UNKNOWN };
      state.output.ui = state.output?.ui || { ...defaultValues };
      state.output.ui.isVisible = true;
      state.internal.userInteraction.status = UserInteractionStatus.STARTED;
    });
  }

  onHide() {
    this.log.debug('onHide');
    this.gatewayCoreStore.setState((state) => {
      state.output = state.output || { gatewayStatus: GatewayStatus.UNKNOWN };
      state.output.ui = state.output?.ui || { ...defaultValues };
      state.output.ui.isVisible = false;
      state.internal.userInteraction.status = UserInteractionStatus.FINISHED;
    });
  }

  onLoad() {
    this.log.debug('onLoad');
    this.gatewayCoreStore.setState((state) => {
      state.output = state.output || { gatewayStatus: GatewayStatus.UNKNOWN };
      state.output.ui = state.output?.ui || { ...defaultValues };
      state.output.ui.isLoading = false;
      state.output.ui.isLoaded = true;
    });
  }
}
