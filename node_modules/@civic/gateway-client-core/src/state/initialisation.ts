import { CivicPassMessageAction } from '../types/civicPass';
import { InputStatus } from '../types/fetch';
import { GatewayStatus } from '../types/gateway';
import { GatewayCoreState } from '../types/gatewayCore';
import {
  GatewayTokenCheckType,
  statusFromGatewayTokenIfExists,
  statusIfGatekeeperRecordRejected,
  StatusIfGatekeeperRecordRejectedType,
} from './common';
import { CalculateIssuanceStatusReturn, computeIssuanceStatus } from './issuance';

export type ComputeCheckingType = GatewayStatus.ERROR | GatewayStatus.CHECKING;
// returns true if:
// - the civicPass status action is STATUS
// AND the gatewayToken or gatekeeperRecord calls are still in progress
export const civicPassStatusLookupInProgress = (state: GatewayCoreState) =>
  state.inputs.civicPass.received?.action === CivicPassMessageAction.STATUS &&
  (!state.inputs.gatewayToken.status ||
    state.inputs.gatewayToken.status === InputStatus.IN_PROGRESS ||
    (!state.inputs.parameters?.disableInitialGatekeeperLookup &&
      (!state.inputs.gatekeeperRecord.status || state.inputs.gatekeeperRecord?.status === InputStatus.IN_PROGRESS)));

export const computeChecking = (state: GatewayCoreState): ComputeCheckingType | undefined => {
  if (!state.inputs.civicPass.status || civicPassStatusLookupInProgress(state)) {
    if (
      state.inputs.gatekeeperRecord.status === InputStatus.ERROR ||
      state.inputs.gatewayToken.status === InputStatus.ERROR
    ) {
      return GatewayStatus.ERROR;
    }
    if (
      state.inputs.gatekeeperRecord.status === InputStatus.IN_PROGRESS ||
      state.inputs.gatewayToken.status === InputStatus.IN_PROGRESS
    ) {
      return GatewayStatus.CHECKING;
    }
  }

  return undefined;
};
export const checkForInProgress = (state: GatewayCoreState): GatewayTokenCheckType | ComputeCheckingType =>
  statusFromGatewayTokenIfExists(state) ||
  computeChecking(state) ||
  (state.internal?.status as GatewayTokenCheckType | ComputeCheckingType);

export type ComputeInitialStateType =
  | StatusIfGatekeeperRecordRejectedType
  | ComputeCheckingType
  | GatewayTokenCheckType
  | CalculateIssuanceStatusReturn;

export const computeInitialState = (state: GatewayCoreState): ComputeInitialStateType =>
  computeChecking(state) ||
  statusIfGatekeeperRecordRejected(state) ||
  statusFromGatewayTokenIfExists(state) ||
  computeIssuanceStatus(state) ||
  (state.internal?.status as ComputeInitialStateType);
