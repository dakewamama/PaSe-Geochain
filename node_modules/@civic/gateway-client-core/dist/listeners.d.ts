import { MessageEventInterface } from './types/eventInterface';
import { CivicPassMessageResponse } from './types/civicPass';
import { LoggingInterface } from './logger/provider.logger';
import { CivicSignEventTypeRequestMessage } from './types/civicSign';
import { ChainClientInterface, GatewayToken } from './types/chain';
type ListenerHandler = (arg: unknown) => void;
export declare class ListenerManager {
    readonly messageEventInterface: MessageEventInterface;
    readonly chainImplementation: ChainClientInterface;
    readonly instanceId: string;
    readonly log: LoggingInterface;
    readonly messageListeners: Record<string, ListenerHandler>;
    constructor(messageEventInterface: MessageEventInterface, chainImplementation: ChainClientInterface, instanceId: string, log?: LoggingInterface);
    registerCivicPassListener(onMessage: (data: CivicPassMessageResponse) => void): void;
    registerCivicSignListener(onMessage: (data: CivicSignEventTypeRequestMessage) => void): void;
    registerOnChainListeners(onTokenChange: (gatewayToken: GatewayToken) => void): void;
    unregisterAllListeners(): void;
}
export {};
