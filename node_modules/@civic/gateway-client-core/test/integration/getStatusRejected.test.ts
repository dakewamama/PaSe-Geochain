import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { GatewayStatus } from '../../src';
import { GatekeeperAPIStatus } from '../../src/types/gatekeeperApi';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

const rejectionStatusToGatewayStatusMap: { [key: number]: GatewayStatus } = {
  [GatekeeperAPIStatus.REJECTED]: GatewayStatus.REJECTED,
  [GatekeeperAPIStatus.VPN_NOT_SUPPORTED]: GatewayStatus.VPN_NOT_SUPPORTED,
  [GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED]: GatewayStatus.LOCATION_NOT_SUPPORTED,
  [GatekeeperAPIStatus.REQUESTED_RETRIES_EXHAUSTED]: GatewayStatus.ERROR,
};

describe('GatewayClientCore get-status rejection integration tests', () => {
  // for each rejection state
  Object.keys(rejectionStatusToGatewayStatusMap).forEach((key: string) => {
    const gkAPIState = Number(key) as GatekeeperAPIStatus;
    const expectedGatewayStatus = rejectionStatusToGatewayStatusMap[gkAPIState];

    let testHelpers: IntegrationTestHelpers;
    const errorCode = '0x001';

    before(() => {
      testHelpers = new IntegrationTestHelpers(sandbox);
      testHelpers.simulateGatekeeperRequestTokenRejection(gkAPIState, errorCode);
    });

    after(() => {
      testHelpers.cleanup();
      sandbox.restore();
    });

    context(`with GK record state ${gkAPIState} mapping to gateway status ${expectedGatewayStatus}`, () => {
      step('1. expect the Gatekeeper client to successfully initialize', () => {
        testHelpers.initializeGatewayCore();
      });

      step('2. Wait for the GK get record request to complete', async () => {
        await sleep(200);
      });

      step('3. Expect the status to change to REJECTED', async () => {
        testHelpers.expectRejected(expectedGatewayStatus, errorCode);
        testHelpers.expectFlowIdToBeSet();
      });

      step('4. Expect userInteraction status to be FINISHED on civicPass rejection action', async () => {
        await testHelpers.simulateCivicPassRejectionAction(gkAPIState);
      });
    });
  });
});
