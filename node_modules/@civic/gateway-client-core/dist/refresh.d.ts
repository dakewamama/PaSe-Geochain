import { GatekeeperClient } from './gatekeeperClient';
import { Issuance } from './issuance';
import { Store } from './state/state';
import { ChainClientInterface } from './types/chain';
import { GatewayCoreState } from './types/gatewayCore';
export declare class Refresh extends Issuance {
    readonly gatewayCoreStore: Store;
    readonly chainImplementation: ChainClientInterface;
    readonly gatekeeperClient: GatekeeperClient;
    readonly abortController: AbortController;
    readonly expectTokenTimeoutSeconds: number;
    constructor(gatewayCoreStore: Store, chainImplementation: ChainClientInterface, gatekeeperClient: GatekeeperClient, abortController: AbortController, expectTokenTimeoutSeconds?: number);
    clearStateBeforeGatekeeperRequest(): void;
    gatekeeperRequest(payer: string | undefined, fullState: GatewayCoreState): Promise<import("./types/gatekeeperApi").RequestTokenIssuanceResponse | null>;
    statusHasValidToken(): boolean;
}
