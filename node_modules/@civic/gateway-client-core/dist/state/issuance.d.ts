import { GatewayCoreState, GatewayInput } from '../types/gatewayCore';
import { ExtendedGatewayStatus, GatewayStatus, InternalGatewayStatus } from '../types/gateway';
import { GatewayTokenCheckType, StatusIfGatekeeperRecordRejectedType, ValidationGatewayStatusType } from './common';
import { CivicPassMessageResponse } from '../types/civicPass';
import { GatekeeperRecordResponse } from '../types/gatekeeperApi';
export declare const calculateIssuanceStartPreApprovedTransaction: (state: GatewayCoreState) => ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX | ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX | undefined;
export declare const hasExistingDataCollectionProcessInProgress: (civicPassEvent: CivicPassMessageResponse | null) => boolean;
export declare const isInPartnerReview: (gatekeeperRecord: GatewayInput<GatekeeperRecordResponse> | undefined) => boolean;
export declare const preApprovedTxAvailable: (gatekeeperRecord: GatewayInput<GatekeeperRecordResponse> | undefined) => boolean;
export type CalculateFromIssuanceAwaitingOnChainReturn = ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR;
export declare const calculateFromIssuanceAwaitingOnChain: (state: GatewayCoreState) => CalculateFromIssuanceAwaitingOnChainReturn | undefined;
export type CalculateFromIssuanceInReviewReturn = InternalGatewayStatus;
export declare const calculateFromIssuanceInReview: (state: GatewayCoreState) => CalculateFromIssuanceInReviewReturn | undefined;
export type CalculateFromGatekeeperIssuanceRequestedReturn = ExtendedGatewayStatus.ISSUANCE_CLIENT_PAYER_REQUESTED | GatewayStatus.IN_REVIEW;
export declare const calculateFromGatekeeperIssuanceRequested: (state: GatewayCoreState) => CalculateFromGatekeeperIssuanceRequestedReturn | undefined;
export type CalculateIssuanceRequestedDataCollectionRestartReturn = ExtendedGatewayStatus.RESTART | InternalGatewayStatus | GatewayStatus.USER_INFORMATION_VALIDATED | GatewayStatus.COLLECTING_USER_INFORMATION;
export declare const calculateIssuanceRequestedDataCollectionRestart: (state: GatewayCoreState) => CalculateIssuanceRequestedDataCollectionRestartReturn | undefined;
export type ComputeIssuanceDataCollectionRestartType = GatewayTokenCheckType | CalculateIssuanceRequestedDataCollectionRestartReturn;
export declare const computeIssuanceDataCollectionRestart: (state: GatewayCoreState) => ComputeIssuanceDataCollectionRestartType;
export type ComputeIssuanceRequestedType = GatewayTokenCheckType | CalculateFromGatekeeperIssuanceRequestedReturn;
export declare const computeIssuanceRequested: (state: GatewayCoreState) => ComputeIssuanceRequestedType;
export declare const computeIssuanceAwaitingOnChainToken: (state: GatewayCoreState) => GatewayTokenCheckType | CalculateFromIssuanceAwaitingOnChainReturn;
export type ComputeIssuanceInReviewType = GatewayTokenCheckType | StatusIfGatekeeperRecordRejectedType | CalculateFromIssuanceInReviewReturn;
export declare const computeIssuanceInReview: (state: GatewayCoreState) => ComputeIssuanceInReviewType;
export type CalculateIssuanceStatusReturn = ValidationGatewayStatusType | InternalGatewayStatus;
export declare const calculateIssuanceStatus: (state: GatewayCoreState) => CalculateIssuanceStatusReturn | undefined;
export declare const computeIssuanceStatus: (state: GatewayCoreState) => GatewayTokenCheckType | CalculateIssuanceStatusReturn;
export declare const computeIssuanceStartPreApprovedTransaction: (state: GatewayCoreState) => GatewayTokenCheckType | ExtendedGatewayStatus.ISSUANCE_CLIENT_SENDS_REQUEST_NEW_TX | ExtendedGatewayStatus.ISSUANCE_CLIENT_THIRD_PARTY_SENDS_REQUEST_NEW_TX;
