import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { nowSeconds } from '../../src/utils/expiry';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore force require refresh integration test', () => {
  let testHelpers: IntegrationTestHelpers;
  let initialExpirySeconds: number;
  before(() => {
    initialExpirySeconds = nowSeconds() + 100000;
    testHelpers = new IntegrationTestHelpers(sandbox);
    // stub successful fetch calls with existing GK record
    testHelpers.stubSuccessfulFetchCalls({ withExistingGatekeeperRecord: true });
    // stub find token with an expired token
    testHelpers.stubFindToken({
      expiryTime: initialExpirySeconds, // expires in the future
    });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  step('1. expect the Gatekeeper client to successfully initialize', () => {
    testHelpers.initializeGatewayCore();
  });

  step('wait for GK and on-chain checks to complete', async () => {
    await sleep(200);
  });

  step('2. Expect gateway status to change to ACTIVE', async () => {
    testHelpers.expectActiveToken(initialExpirySeconds);
  });

  step('3. Trigger a force refresh', async () => {
    testHelpers.triggerForceRefresh();
  });

  step('4. Expect gateway status to change to REFRESH_TOKEN_REQUIRED', async () => {
    testHelpers.expectRefreshTokenRequired();
  });

  step('5. Expect successful civic-sign public-key, did and POWO flows', async () => {
    await testHelpers.expectSuccessfulCivicSignProofFlow();
  });

  step('5. Simulate a successfull client sending of transaction when presented to the user', async () => {
    testHelpers.prepareSuccessfulHandleTransaction();
  });

  step('6 . Simulate refresh action being triggered', async () => {
    await testHelpers.simulateSucessfulDataCollectionTriggeringGKRefreshRequest();
  });

  step(
    '7. OnChain listener fires with active token and gateway status and gateway token are updated to active with a new expiry time',
    async () => {
      const newExpiry = initialExpirySeconds + 10000;
      await testHelpers.simulateActiveOnChainToken(initialExpirySeconds + 10000);
      testHelpers.expectActiveToken(newExpiry);
      testHelpers.expectFlowIdToBeSet();
    }
  );
});
