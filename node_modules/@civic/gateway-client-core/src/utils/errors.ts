import logger from '../logger';
import { LoggingInterface } from '../logger/provider.logger';

export const ErrorCode = {
  INSUFFICIENT_FUNDS: '0x1',
  SIGN_TRANSACTION_ERROR: '0x2',
  SIGN_TRANSACTION_USER_REJECTED_ERROR: '0x21',
  SIGN_TRANSACTION_UNKNOWN_ERROR: '0x22',
  SEND_TRANSACTION_ERROR: '0x3',
  CUSTOM_HANDLE_TRANSACTION_ERROR: '0x4',
  POWO_ERROR: '0x5',
  CHAIN_CONFIRMATION_TIMEOUT_ERROR: '0x6', // the tx has been sent but hasn't confirmed on-chain within a timeout
  TRANSACTION_FAILED_ON_CHAIN_ERROR: '0x61', // The tx receipt indicates the transaction failed / had an error.
  TRANSACTION_DROPPED_ERROR: '0x62', // Transaction not found on-chain after sending it. For Solana, when confirmTransaction times out.
  TRANSACTION_CONFIRMATION_UNKNOWN_ERROR: '0x63', // For e.g. Solana confirmTransaction threw some error instead of just timing out.
  BROWSER_CLOSED_WHILE_TRANSACTION_PENDING: '0x64', // We use the Beacon API (in no-cors mode) to emit this if the user closes the browser tab while a tx is still in flight
  EXPECTED_GATEKEEPER_RECORD: '0x7', // we have a token on chain but no correspondoing record in the gatekeeper
};

export class ChainError extends Error {
  constructor(message: string, readonly errorCode?: string, useLogger: LoggingInterface = logger) {
    super(message);
    useLogger?.error(`ChainError: ${message} throwing code ${errorCode}`);
    Object.setPrototypeOf(this, ChainError.prototype); // required for instance checking
  }
}

export class ChainConfirmationTimeout extends Error {
  constructor(message: string, readonly errorCode = ErrorCode.CHAIN_CONFIRMATION_TIMEOUT_ERROR) {
    super(message);
    logger.error(`ChainConfirmationTimeout: ${message} throwing code ${errorCode}`);
    Object.setPrototypeOf(this, ChainConfirmationTimeout.prototype); // required for instance checking
  }
}
