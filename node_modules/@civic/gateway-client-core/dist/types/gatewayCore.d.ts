import { GknData } from '../../src/gatekeeperNetworkService';
import { ChainConfirmationTimeout, ChainError } from '../utils/errors';
import { ChainDetails, ChainType, GatewayToken } from './chain';
import { CivicPassMessageResponse } from './civicPass';
import { CivicSignEventTypeRequestMessage } from './civicSign';
import { InputStatus } from './fetch';
import { FlowStatus, FlowType } from './flow';
import { GatekeeperRecordResponse, PendingPayload } from './gatekeeperApi';
import { GatewayStatus, InternalGatewayStatus } from './gateway';
import { DynamicGatewayClientParameters, GatewayClientParameters } from './parameters';
import { UIInput, UIOutput } from './ui';
import { UserInteraction } from './userInteraction';
export type GatewayInput<T, E = unknown, S = unknown> = {
    received: T | null;
    status: InputStatus | null;
    error?: E | Error | Record<string, unknown> | null;
    sent?: S;
};
export type FlowParameters = {
    redirectUrl?: string;
    networkAddress?: string;
    action?: string;
    wallet: string;
    chain?: ChainType;
    chainNetwork?: string;
    ownerSigns: boolean;
    gatekeeperSendsTransaction: boolean;
    errorCode?: string;
    partnerAppId?: string;
    instanceId: string;
    signedTx?: string;
    flowId: string;
    did?: string;
    flowType?: FlowType;
    payload?: string;
    referrer?: string;
    domain?: string;
    hideWalletPrompts?: boolean;
    civicClient: string;
    stage?: string;
    gatewayStatus?: InternalGatewayStatus | null;
};
export type ClientCoreOutput = {
    gatewayStatus: GatewayStatus;
    gatewayToken?: GatewayToken;
    flowParameters?: FlowParameters;
    gatewayTokenTransaction?: string;
    pendingRequests?: PendingPayload;
    flowState?: {
        status?: FlowStatus;
        userInteraction: UserInteraction;
    };
    ui?: UIOutput;
};
export type ChainTransaction = {
    sentTxId?: string;
    error?: Error | ChainError;
    attempts?: number;
};
export type ClientCoreInternal = {
    status: InternalGatewayStatus | null;
    chainTransaction?: ChainTransaction;
    instanceId?: string;
    userInteraction: UserInteraction;
    refreshInterval?: any;
    errors: {
        expectedOnChainToken?: ChainConfirmationTimeout | null;
        expectedTokenGatekeeperRecord?: ChainError | null;
    };
    ownerDids: string[];
    chainDetails?: ChainDetails;
};
export type ClientCoreInput = {
    civicSign: GatewayInput<CivicSignEventTypeRequestMessage, ChainError>;
    civicPass: GatewayInput<CivicPassMessageResponse>;
    gatewayToken: GatewayInput<GatewayToken>;
    gatekeeperRecord: GatewayInput<GatekeeperRecordResponse>;
    gatekeeperNetworkData: GatewayInput<GknData>;
    parameters: GatewayClientParameters | null;
    dynamicParameters?: DynamicGatewayClientParameters;
};
export interface GatewayCoreState {
    inputs: ClientCoreInput;
    internal: ClientCoreInternal;
    output?: ClientCoreOutput;
    functions: {
        reset: () => void;
    };
}
export interface GatewayClientCoreInterface {
    abort: () => void;
    instanceId: string;
    ui: UIInput;
}
export type Transition<T extends R[], R> = {
    nextState: T;
    compute?: (state: GatewayCoreState) => R;
};
