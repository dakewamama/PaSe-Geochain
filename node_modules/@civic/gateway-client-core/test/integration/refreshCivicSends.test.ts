import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore refresh Civic sends integration tests', () => {
  let testHelpers: IntegrationTestHelpers;

  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox, { clientSends: false });
    // stub successful fetch calls with existing GK record
    testHelpers.stubSuccessfulFetchCalls({ withExistingGatekeeperRecord: true });
    // stub find token with an expired token
    testHelpers.stubFindToken({
      expiryTime: 1682891700, // old timestamp
    });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  afterEach(() => {
    testHelpers.expectFlowIdToBeSet('GWRC_refresh_');
  });

  step('1. expect the Gatekeeper client to successfully initialize', async () => {
    testHelpers.initializeGatewayCore();
    // wait for GK and on-chain checks to complete
    await sleep(110);
  });

  step('2. Expect gateway status to change to REFRESH_TOKEN_REQUIRED', async () => {
    testHelpers.expectRefreshTokenRequired();
  });

  step('3. Expect successful civic-sign public-key, did and POWO flows', async () => {
    await testHelpers.expectSuccessfulCivicSignProofFlow();
  });

  step('4. Simulate refresh action being triggered', async () => {
    await testHelpers.simulateSucessfulDataCollectionTriggeringGKRefreshRequest();
  });

  step('5. Wait for the GK refresh request to complete', async () => {
    await sleep(120);
  });

  step(
    '6 OnChain listener fires with active token and gateway status and gateway token are updated to active',
    async () => {
      await testHelpers.simulateActiveOnChainToken();
      testHelpers.expectActiveToken();
    }
  );
});
