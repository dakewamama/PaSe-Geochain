import { GatekeeperHttpConfig } from './parameters';
export declare enum State {
    ACTIVE = "ACTIVE",
    REVOKED = "REVOKED",
    FROZEN = "FROZEN"
}
export type GatewayToken = {
    readonly issuingGatekeeper: string;
    readonly gatekeeperNetworkAddress: string;
    readonly owner: string;
    readonly state: State;
    readonly identifier: string;
    readonly expiryTime?: number;
};
export declare enum TokenState {
    REQUESTED = "REQUESTED",
    ACTIVE = "ACTIVE",
    REVOKED = "REVOKED",
    FROZEN = "FROZEN",
    REJECTED = "REJECTED"
}
export declare enum ChainType {
    SOLANA = "solana",
    ETHEREUM = "ethereum",
    CASPER = "casper",
    ICP = "icp"
}
export interface ChainImplementationProps {
    network?: string;
    owner?: string;
    gatekeeperNetwork?: string;
    stage?: string;
}
export declare enum SignatureMethod {
    TRANSACTION = 0,
    MESSAGE = 1
}
export type ProveWalletOwnershipResponse = {
    proof: string;
    signatureMethod: SignatureMethod;
};
type DIDMethod = string;
type DIDIdentifier = string;
export type DID = `did:${DIDMethod}:${DIDIdentifier}`;
export type ChainEvent = 'TOKEN_CREATED' | 'TOKEN_CHANGED';
export type ChainDetails = {
    chainType: ChainType;
    chainNetwork: string;
};
export interface ChainClientInterface {
    on: (event: ChainEvent, listener: (GatewayToken: GatewayToken) => void) => this;
    findGatewayToken: () => Promise<GatewayToken | undefined>;
    proveWalletOwnership: (message?: string) => Promise<ProveWalletOwnershipResponse>;
    handleTransaction?: (partiallySignedTx: string, frontendPollingTimeoutSeconds?: number) => Promise<string>;
    ownerDids: () => Promise<DID[]>;
    chainDetails: ChainDetails;
    onDestroy: () => Promise<void>;
    pendingTransaction: string | undefined;
    signMessage?: (message: Uint8Array) => Promise<Uint8Array>;
}
export interface ChainLegacy {
    addOnGatewayTokenChangeListener: (gatewayToken: GatewayToken, tokenDidChange: (GatewayToken: GatewayToken) => void) => Promise<number>;
    addOnGatewayTokenCreatedOrChangedListener?: (tokenChange: (GatewayToken: GatewayToken) => void) => number;
    removeOnGatewayTokenChangeListener: (listenerId: number) => void;
    findGatewayToken: () => Promise<GatewayToken | undefined>;
    proveWalletOwnership: (message?: string) => Promise<ProveWalletOwnershipResponse>;
    signMessage?: (message: Uint8Array) => Promise<Uint8Array>;
    handleUserSignedTransaction: (partiallySignedTx: string) => Promise<string>;
    did: string;
    httpConfig: GatekeeperHttpConfig;
    chainType: ChainType;
    chainNetwork: string;
    dAppHandlesTransactions: boolean;
    initProps: ChainImplementationProps;
    onDestroy: () => void;
}
export {};
