export enum CivicPassMessageEventResult {
  SUCCESS = 'success',
  FAILURE = 'failure',
  CANCELLED = 'cancelled',
  IN_PROGRESS = 'inProgress',
  ERROR = 'error',
}

export enum CivicPassMessageAction {
  ISSUANCE = 'issuance',
  CONFIRM_TRANSACTION = 'confirmTransaction',
  TOKEN_FROZEN = 'tokenFrozen',
  TOKEN_ACTIVE = 'tokenActive',
  TOKEN_REVOKED = 'tokenRevoked',
  TOKEN_REJECTED = 'tokenRejected',
  TOKEN_IN_REVIEW = 'tokenInReview',
  TOKEN_REFRESH_IN_REVIEW = 'tokenRefreshInReview',
  TOKEN_IN_PARTNER_REVIEW = 'tokenInPartnerReview',
  FAILED_IP_CHECK = 'failedIpCheck',
  FAILED_VPN_CHECK = 'failedVpnCheck',
  REFRESH = 'refresh',
  STATUS = 'status',
  ERROR = 'error',
  CHAIN_ERROR = 'chainError',
  SIGN_TRANSACTION = 'signTransaction',
  AWAITING_TRANSACTION_CONFIRMATION = 'awaitingTransactionConfirmation',
  START_PRE_APPROVED_TRANSACTION = 'startPreApprovedTransaction',
}

export enum ValidationStatus {
  COLLECTING = 'COLLECTING',
  PROCESSING = 'PROCESSING',
  IN_REVIEW = 'IN_REVIEW',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  NOT_FOUND = 'NOT_FOUND',
}

export type CivicPassMessagePayload = Record<string, unknown> & {
  status: ValidationStatus;
};

export interface CivicPassMessageRequest {
  action: CivicPassMessageAction;
  networkAddress: string;
  payload?: string;
}

export interface CivicPassMessageEventResponse extends MessageEvent {
  data: CivicPassMessageResponse;
}

export interface CivicPassMessageBase {
  instanceId?: string;
  source?: string;
}

export interface CivicPassMessageResponse extends CivicPassMessageBase {
  event: CivicPassMessageEventResult;
  action: CivicPassMessageAction;
  payload?: CivicPassMessagePayload;
}

export interface CivicPassMessageEventResponse extends MessageEvent {
  data: CivicPassMessageResponse;
}
