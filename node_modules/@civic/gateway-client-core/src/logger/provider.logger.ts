import { LogLevel } from '../types/log';

export interface LoggingInterface {
  setLogLevel?: (logLevel: LogLevel) => void;
  debug: (message: string, object?: unknown) => void;
  info: (message: string, object?: unknown) => void;
  warn: (message: string, object?: unknown) => void;
  error: (message: string, exception?: unknown) => void;
}

const logLevels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR];

export const allowLogging = (atLeastlogLevel: LogLevel, logLevel: LogLevel): boolean =>
  logLevels.indexOf(logLevel) >= logLevels.indexOf(atLeastlogLevel);

export const DEFAULT_LOG_LEVEL = LogLevel.INFO;

export class LoggingProvider implements LoggingInterface {
  logger: LoggingInterface;

  logLevel: LogLevel;

  constructor(logger: LoggingInterface, logLevel = DEFAULT_LOG_LEVEL) {
    this.logger = logger;
    this.logLevel = logLevel;
  }

  setLogLevel(logLevel: LogLevel): void {
    this.logLevel = logLevel;
  }

  debug(message: string, object?: unknown): void {
    if (allowLogging(this.logLevel, LogLevel.DEBUG)) this.logger.debug(message, object);
  }

  info(message: string, object?: unknown): void {
    if (allowLogging(this.logLevel, LogLevel.INFO)) this.logger.info(message, object);
  }

  warn(message: string, object?: unknown): void {
    if (allowLogging(this.logLevel, LogLevel.WARN)) this.logger.warn(message, object);
  }

  error(message: string, exception?: unknown): void {
    if (allowLogging(this.logLevel, LogLevel.ERROR)) this.logger.error(message, exception);
  }
}
