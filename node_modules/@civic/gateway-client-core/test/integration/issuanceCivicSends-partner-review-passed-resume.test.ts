import { step } from 'mocha-steps';
import sinon from 'sinon';
import chai from 'chai';
import chaiSubset from 'chai-subset';
import chaiAsPromised from 'chai-as-promised';
import sinonChai from 'sinon-chai';
import { IntegrationTestHelpers, sleep } from '../testSupport';
import { GatekeeperAPIStatus } from '../../src/types/gatekeeperApi';

chai.use(sinonChai);
chai.use(chaiSubset);
chai.use(chaiAsPromised);

const sandbox = sinon.createSandbox();

describe('GatewayClientCore issuance partner-review civic-sends resume integration tests', () => {
  let testHelpers: IntegrationTestHelpers;
  const pendingPayload = {
    presentationRequestId: 'b172e3fd-61b0-4af9-b158-05f087ecbb4d',
  };
  const inPartnerReviewGKAPIResponse = {
    processInfo: {
      processId: 'b172e3fd-61b0-4af9-b158-05f087ecbb4d',
      details: {
        scopeRequestId: 'b172e3fd-61b0-4af9-b158-05f087ecbb4d',
        scopeRequestStatus: 'verification-success',
        userId: 'did:sol:H83rGqSWGhKKsTJfTjTDzZ919CUkG79C96enbbuMmqqq',
      },
    },
    pending: pendingPayload,
    status: GatekeeperAPIStatus.REQUESTED,
  };
  before(() => {
    testHelpers = new IntegrationTestHelpers(sandbox, { clientSends: false });
    testHelpers.stubSuccessfulFetchCalls({
      getResponsePayload: [GatekeeperAPIStatus.REQUESTED, inPartnerReviewGKAPIResponse],
      payer: null,
    });
  });

  after(() => {
    testHelpers.cleanup();
    sandbox.restore();
  });

  afterEach(() => {
    testHelpers.expectFlowIdToBeSet('GWRC_issuance_');
  });

  step('1. expect the Gatekeeper client to successfully initialize', async () => {
    testHelpers.initializeGatewayCore();
    // wait for GK and on-chain checks to complete
    await sleep(110);
  });

  step('2. Expect gateway status to change to IN_REVIEW with a pending payload', async () => {
    testHelpers.expectInPartnerReview();
    testHelpers.expectPendingPayload(pendingPayload);
  });

  step('3. Expect the GK-API to be polled', async () => {
    await sleep(2000);
    await testHelpers.expectGKApiPolling();
  });

  step('4. Simulate the partner approving the request and the GK-API returning a CREATED status', async () => {
    await testHelpers.prepareGKApiPollingResponse(GatekeeperAPIStatus.ISSUED, {
      status: GatekeeperAPIStatus.ISSUED,
    });
  });

  step(
    '5. OnChain listener fires with active token and gateway status and gateway token are updated to active',
    async () => {
      await testHelpers.simulateActiveOnChainToken();
      testHelpers.expectActiveToken();
    }
  );

  step('6. Expect the user to finish the flow', async () => {
    await testHelpers.simulateUserFinishedFlow();
  });
});
