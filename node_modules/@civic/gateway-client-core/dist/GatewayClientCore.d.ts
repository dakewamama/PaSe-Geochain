import { ClientCoreInput } from './types/clientCore';
import { GatewayClientCoreInterface, GatewayInput } from './types/gatewayCore';
import { DynamicGatewayClientParameters, GatewayClientParameters } from './types/parameters';
import { ChainDetails } from './types/chain';
import { UIInput } from './types/ui';
import { GknData } from './gatekeeperNetworkService';
export declare const getInstanceInputObject: (input: ClientCoreInput | undefined) => InstanceInputObject;
export declare const shouldUpdateInstance: (inputs: ClientCoreInput, instance: GatewayClientCore | undefined) => boolean;
export declare const hasRequiredInputs: (inputs: ClientCoreInput) => boolean;
export declare const getInstanceName: (inputs: ClientCoreInput, instanceId: string) => string;
export type InstanceInputObject = GatewayClientParameters & ChainDetails;
export declare class GatewayClientCore implements GatewayClientCoreInterface {
    readonly inputs: ClientCoreInput;
    private orchestratorInst;
    private uiInst;
    static currentInstance: GatewayClientCore | undefined;
    private gatewayCoreStore;
    instanceId: string;
    private log;
    constructor(inputs: ClientCoreInput);
    static getSingleInstance(inputs: ClientCoreInput): GatewayClientCore | undefined;
    updateDynamicParameters(dynamicParameters: DynamicGatewayClientParameters): void;
    updateGatekeeperNetworkServiceData(gknData: GatewayInput<GknData>): void;
    startOrResumeFlow(): void;
    abort(): void;
    get ui(): UIInput;
}
