import { expect } from 'chai';
import * as sinon from 'sinon';
import { LogLevel } from '../../src/types/log';
import { LoggingInterface, LoggingProvider } from '../../src/logger/provider.logger';

const sandbox = sinon.createSandbox();

describe('ProviderLogger tests', () => {
  let logProvider: LoggingInterface;
  let spyDebug: sinon.SinonSpy;
  let spyWarn: sinon.SinonSpy;
  let spyInfo: sinon.SinonSpy;
  let spyError: sinon.SinonSpy;

  afterEach(sandbox.restore);

  beforeEach(() => {
    spyDebug = sandbox.spy(console, 'debug');
    spyWarn = sandbox.spy(console, 'warn');
    spyInfo = sandbox.spy(console, 'info');
    spyError = sandbox.spy(console, 'error');
  });

  context('should instantiate a new loggingProvider with the default log level', () => {
    beforeEach(() => {
      logProvider = new LoggingProvider(console);
    });

    it('log-level should be INFO by default', () => {
      logProvider.debug('Should not log this');
      expect(spyDebug.called).to.be.false;
      logProvider.info('Should log this');
      expect(spyInfo.called).to.be.true;
    });
  });

  context('should instantiate a new loggingProvider with the default level from the params', () => {
    beforeEach(() => {
      logProvider = new LoggingProvider(console);
    });

    it('log-level should be INFO', () => {
      logProvider.debug('Should not log this');
      expect(spyDebug.called).to.be.false;

      logProvider.info('Should log this');
      expect(spyInfo.called).to.be.true;
    });
  });

  context('should instantiate a new logLocal passing a log level', () => {
    beforeEach(() => {
      logProvider = new LoggingProvider(console, LogLevel.WARN);
    });

    it('should not log for levels lower than the set log level', () => {
      logProvider.debug('This should not log');
      expect(spyDebug.called).to.be.false;
      logProvider.info('This should not log');
      expect(spyInfo.calledOnce).to.be.false;
      logProvider.warn('This should log');
      expect(spyWarn.calledOnce).to.be.true;
      logProvider.error('This should log');
      expect(spyError.calledOnce).to.be.true;
    });
  });

  it('should set log level correctly', () => {
    logProvider = new LoggingProvider(console, LogLevel.ERROR);
    logProvider.error('This should log');
    (logProvider as LoggingProvider).setLogLevel(LogLevel.DEBUG);
    logProvider.error('This should not log');
    expect(spyDebug.calledTwice).to.be.false;
  });

  it('should have default value of info and only log info messages correctly', () => {
    const logger = new LoggingProvider(console);
    logger.debug('Testing debug');
    logger.info('Testing info');
    expect(spyDebug.called).to.be.false;
    expect(spyInfo.called).to.be.true;
  });

  context('debug', () => {
    beforeEach(() => {
      logProvider.setLogLevel?.(LogLevel.DEBUG);
    });

    it('should log debug messages with object correctly', () => {
      logProvider.debug('Testing debug', { test: 'test' });
      expect(spyDebug.calledOnceWith('Testing debug')).to.be.true;
    });
  });

  context('info', () => {
    beforeEach(() => {
      logProvider.setLogLevel?.(LogLevel.INFO);
    });
    it('should log info messages correctly', () => {
      logProvider.info('Testing info');
      expect(spyInfo.calledOnceWith('Testing info')).to.be.true;
    });

    it('should log info messages correctly', () => {
      logProvider.info('Testing info', { test: 'test' });
      expect(spyInfo.calledOnceWith('Testing info')).to.be.true;
    });
  });

  context('warn', () => {
    beforeEach(() => {
      logProvider.setLogLevel?.(LogLevel.WARN);
    });
    it('should log warn messages correctly', () => {
      logProvider.warn('Testing warn');
      expect(spyWarn.calledOnceWith('Testing warn')).to.be.true;
    });

    it('should log warn messages with object correctly', () => {
      logProvider.warn('Testing warn', { test: 'test' });
      expect(spyWarn.calledOnceWith('Testing warn')).to.be.true;
    });
  });

  context('error', () => {
    beforeEach(() => {
      logProvider.setLogLevel?.(LogLevel.ERROR);
    });
    it('should log error messages correctly', () => {
      logProvider.error('Testing error');
      expect(spyError.calledOnceWith('Testing error')).to.be.true;
    });

    it('should log error messages correctly', () => {
      logProvider.error('Testing error', { test: 'test' });
      expect(spyError.calledOnceWith('Testing error')).to.be.true;
    });
  });
});
